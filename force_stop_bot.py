#!/usr/bin/env python3
"""
@file: force_stop_bot.py
@description: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
@created: 2025-09-20
"""

import asyncio
import subprocess
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

import httpx
from loguru import logger

from app.config import get_config


def kill_python_processes():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python."""
    logger.info("üî™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python...")

    try:
        # Windows –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
        result = subprocess.run(
            ["taskkill", "/F", "/IM", "python.exe"],
            check=False,
            capture_output=True,
            text=True,
            timeout=10,
        )

        if result.returncode == 0:
            logger.success("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        else:
            logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ taskkill –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: {result.returncode}")
            logger.info(f"–í—ã–≤–æ–¥: {result.stdout}")

    except subprocess.TimeoutExpired:
        logger.error("‚ùå Timeout –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ taskkill")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")


async def clear_webhook_completely():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    logger.info("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook...")

    try:
        config = get_config()

        if not config.telegram or not config.telegram.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False

        bot_token = config.telegram.bot_token

        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook
            for attempt in range(3):
                logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook #{attempt + 1}")

                delete_url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook"

                try:
                    response = await client.post(
                        delete_url,
                        json={
                            "drop_pending_updates": True,
                        },
                    )

                    if response.status_code == 200:
                        data = response.json()
                        if data.get("ok"):
                            logger.success(f"‚úÖ Webhook –æ—á–∏—â–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                        else:
                            logger.warning(f"‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª: {data}")
                    else:
                        logger.warning(f"‚ö†Ô∏è HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")

                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt < 2:
                    await asyncio.sleep(2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                info_url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
                info_response = await client.get(info_url)

                if info_response.status_code == 200:
                    info_data = info_response.json()
                    if info_data.get("ok"):
                        webhook_url = info_data.get("result", {}).get("url", "")
                        pending_updates = info_data.get("result", {}).get(
                            "pending_update_count",
                            0,
                        )

                        logger.info(
                            f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å webhook: {webhook_url or '–æ—á–∏—â–µ–Ω'}",
                        )
                        logger.info(f"üìä –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pending_updates}")

                        return not webhook_url  # True –µ—Å–ª–∏ webhook –æ—á–∏—â–µ–Ω

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")

    return False


def wait_for_system_stabilization():
    """–û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã (60 —Å–µ–∫—É–Ω–¥)...")

    for i in range(60, 0, -10):
        logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {i} —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)

    logger.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def test_bot_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...")

    try:
        config = get_config()

        if not config.telegram or not config.telegram.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False

        bot_token = config.telegram.bot_token

        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
            me_url = f"https://api.telegram.org/bot{bot_token}/getMe"
            response = await client.get(me_url)

            if response.status_code == 200:
                data = response.json()
                if data.get("ok"):
                    bot_info = data.get("result", {})
                    logger.success(
                        f"‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤: @{bot_info.get('username', 'unknown')}",
                    )
                    return True

            logger.error(f"‚ùå –¢–µ—Å—Ç API –Ω–µ –ø—Ä–æ—à–µ–ª: {response.status_code}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    logger.add("force_stop.log", rotation="1 MB", retention="1 week")

    logger.info("üõë –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê")
    logger.info("=" * 60)

    # –®–∞–≥ 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
    kill_python_processes()

    logger.info("=" * 60)

    # –®–∞–≥ 2: –û—á–∏—Å—Ç–∫–∞ webhook
    webhook_cleared = await clear_webhook_completely()

    logger.info("=" * 60)

    # –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    wait_for_system_stabilization()

    logger.info("=" * 60)

    # –®–∞–≥ 4: –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    ready = await test_bot_readiness()

    logger.info("=" * 60)

    if webhook_cleared and ready:
        logger.success("üéâ –í–°–Å –ì–û–¢–û–í–û!")
        logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å")
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        logger.info("")
        logger.info("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:")
        logger.info("   uv run python main.py")
    else:
        logger.error("üòû –ù–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã")
        logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not webhook_cleared:
            logger.info("   - Webhook –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
        if not ready:
            logger.info("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        logger.info("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
        logger.info("   - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ")


if __name__ == "__main__":
    asyncio.run(main())
