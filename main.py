#!/usr/bin/env python3
"""
@file: main.py
@description: –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω Telegram –±–æ—Ç–∞
@dependencies: aiogram, asyncio, signal
@created: 2025-09-12
"""

import asyncio
import signal
import sys
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager, suppress

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from loguru import logger

from app.config import get_config
from app.database import close_db, init_db
from app.handlers import ROUTERS
from app.log_lexicon.main import (
    BOT_AI_MANAGER_CLOSE_TIMEOUT,
    BOT_AI_MANAGER_CLOSED,
    BOT_COMMANDS_SET,
    BOT_CRITICAL_ERROR,
    BOT_DB_CLOSE_TIMEOUT,
    BOT_DB_CLOSED,
    BOT_DB_INITIALIZING,
    BOT_ERROR_IN_POLLING,
    BOT_ERROR_IN_RUN_POLLING,
    BOT_ERROR_STOPPING_POLLING,
    BOT_INITIALIZED,
    BOT_KEYBOARD_INTERRUPT,
    BOT_POLLING_NOT_STARTED,
    BOT_POLLING_STARTED,
    BOT_POLLING_STOP_TIMEOUT,
    BOT_POLLING_STOPPED,
    BOT_PROGRAM_FINISHED,
    BOT_REGISTERED_ROUTERS,
    BOT_SESSION_CLOSE_TIMEOUT,
    BOT_SESSION_CLOSED,
    BOT_SHUTDOWN_COMPLETED,
    BOT_SHUTDOWN_ERROR,
    BOT_SHUTDOWN_INITIATED,
    BOT_SHUTDOWN_STARTED,
    BOT_SIGNAL_RECEIVED,
    BOT_STARTED,
    BOT_STARTING,
    BOT_USER_INTERRUPTED,
    BOT_WEBHOOK_SET,
    BOT_WEBHOOK_STARTED,
)
from app.services.ai_manager import close_ai_manager
from app.utils.logging import setup_logging


class AIAssistantBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω."""

    def __init__(self) -> None:
        self.config = get_config()
        self.bot: Bot | None = None
        self.dp: Dispatcher | None = None
        self._shutdown_event = asyncio.Event()

    def create_bot(self) -> Bot:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        return Bot(
            token=self.config.telegram.bot_token
            if self.config.telegram
            else "dummy_token",
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                link_preview_is_disabled=True,
            ),
        )

    def create_dispatcher(self) -> Dispatcher:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏."""
        dp = Dispatcher()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –±—É–¥–µ—Ç –∑–¥–µ—Å—å
        # self.register_middleware(dp)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers(dp)

        return dp

    def register_handlers(self, dp: Dispatcher) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        for router in ROUTERS:
            dp.include_router(router)

        logger.info(BOT_REGISTERED_ROUTERS.format(count=len(ROUTERS)))

    async def setup_bot_commands(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é."""
        if not self.bot:
            return

        commands = [
            BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand(command="limits", description="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"),
            BotCommand(command="premium", description="‚≠ê –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø"),
        ]

        await self.bot.set_my_commands(commands)
        logger.info(BOT_COMMANDS_SET)

    async def startup(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        try:
            logger.info(BOT_STARTING)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info(BOT_DB_INITIALIZING)
            await init_db()

            # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.bot = self.create_bot()
            self.dp = self.create_dispatcher()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(
                BOT_STARTED.format(
                    username=bot_info.username, full_name=bot_info.full_name
                )
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
            await self.setup_bot_commands()

            logger.success(BOT_INITIALIZED)

        except Exception as e:
            logger.error(BOT_SHUTDOWN_ERROR.format(error=e))
            raise

    async def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        logger.info(BOT_SHUTDOWN_STARTED)

        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.dp:
                try:
                    await asyncio.wait_for(self.dp.stop_polling(), timeout=10.0)
                    logger.info(BOT_POLLING_STOPPED)
                except TimeoutError:
                    logger.warning(BOT_POLLING_STOP_TIMEOUT)
                except RuntimeError as e:
                    # Handle case when polling was not started
                    if "polling is not started" in str(e).lower():
                        logger.info(BOT_POLLING_NOT_STARTED)
                    else:
                        logger.warning(BOT_ERROR_STOPPING_POLLING.format(error=e))

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            if self.bot:
                try:
                    await asyncio.wait_for(self.bot.session.close(), timeout=5.0)
                    logger.info(BOT_SESSION_CLOSED)
                except TimeoutError:
                    logger.warning(BOT_SESSION_CLOSE_TIMEOUT)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(close_db(), timeout=5.0)
                logger.info(BOT_DB_CLOSED)
            except TimeoutError:
                logger.warning(BOT_DB_CLOSE_TIMEOUT)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(close_ai_manager(), timeout=5.0)
                logger.info(BOT_AI_MANAGER_CLOSED)
            except TimeoutError:
                logger.warning(BOT_AI_MANAGER_CLOSE_TIMEOUT)

            logger.success(BOT_SHUTDOWN_COMPLETED)

        except Exception as e:
            logger.error(BOT_SHUTDOWN_ERROR.format(error=e))

    def setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        if sys.platform != "win32":
            # Unix-–ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
        else:
            # Windows
            signal.signal(signal.SIGINT, self._signal_handler)

    def _signal_handler(self, signum, frame) -> None:  # noqa: ANN001
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        logger.info(BOT_SIGNAL_RECEIVED.format(signal=signum))
        self._shutdown_event.set()

    async def run_polling(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π graceful shutdown."""
        if not self.dp or not self.bot:
            msg = "–ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            raise RuntimeError(msg)

        logger.info(BOT_POLLING_STARTED)

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è polling
            polling_task = asyncio.create_task(
                self.dp.start_polling(
                    self.bot,
                    allowed_updates=self.dp.resolve_used_update_types(),
                    drop_pending_updates=True,
                ),
            )

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            shutdown_task = asyncio.create_task(self._shutdown_event.wait())

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [polling_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED,
            )

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                with suppress(asyncio.CancelledError):
                    await task

            # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–≤–µ—Ä–∏–º —ç—Ç–æ
            if polling_task in done:
                try:
                    await polling_task
                except Exception as e:
                    logger.error(BOT_ERROR_IN_POLLING.format(error=e))
                    raise

        except Exception as e:
            logger.error(BOT_ERROR_IN_RUN_POLLING.format(error=e))
            raise

    async def run_webhook(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)."""
        if not self.config.telegram or not self.config.telegram.webhook_url:
            msg = "WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞ webhook"
            raise ValueError(msg)

        if not self.bot or not self.dp:
            msg = "–ë–æ—Ç –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
            raise RuntimeError(msg)

        logger.info(BOT_WEBHOOK_STARTED.format(url=self.config.telegram.webhook_url))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        await self.bot.set_webhook(
            url=str(self.config.telegram.webhook_url),
            secret_token=self.config.telegram.webhook_secret,
            allowed_updates=self.dp.resolve_used_update_types(),
            drop_pending_updates=True,
        )

        logger.info(BOT_WEBHOOK_SET)

    async def run(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
            self.setup_signal_handlers()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.startup()

            # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
            if self.config.telegram and self.config.telegram.use_polling:
                await self.run_polling()
            else:
                await self.run_webhook()
                # –í —Ä–µ–∂–∏–º–µ webhook –Ω—É–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
                await self._shutdown_event.wait()

            logger.info(BOT_SHUTDOWN_INITIATED)

        except KeyboardInterrupt:
            logger.info(BOT_KEYBOARD_INTERRUPT)
        except Exception as e:
            logger.error(BOT_CRITICAL_ERROR.format(error=e))
            raise
        finally:
            await self.shutdown()


@asynccontextmanager
async def lifespan() -> AsyncGenerator[None, None]:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    bot_app = AIAssistantBot()

    try:
        await bot_app.startup()
        yield
    finally:
        await bot_app.shutdown()


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∞–π–ª–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    from pathlib import Path

    setup_logging(
        log_level="INFO",
        enable_console=True,
        log_file_path=Path("logs"),
        enable_json=True,
        enable_request_logging=True,
    )

    logger.info("üéØ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω: Telegram –±–æ—Ç –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    logger.info("üìÖ –í–µ—Ä—Å–∏—è: 1.0.0 | –î–∞—Ç–∞: 2025-09-12")
    logger.info("-" * 60)

    bot_app = None
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot_app = AIAssistantBot()
        await bot_app.run()

    except KeyboardInterrupt:
        logger.info(BOT_USER_INTERRUPTED)
    except Exception as e:
        logger.error(BOT_CRITICAL_ERROR.format(error=e))
        if bot_app:
            with suppress(Exception):
                await bot_app.shutdown()
        sys.exit(1)
    finally:
        logger.info(BOT_PROGRAM_FINISHED)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ asyncio –¥–ª—è Windows
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    except Exception:
        sys.exit(1)
