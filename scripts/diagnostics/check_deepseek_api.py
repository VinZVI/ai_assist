#!/usr/bin/env python3
"""
@file: check_deepseek_api.py
@description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å DeepSeek API
@created: 2025-09-20
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

import httpx
from loguru import logger

from app.config import get_config


async def check_deepseek_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ DeepSeek API –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º."""
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É DeepSeek API...")

    try:
        config = get_config()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")

        if not config.deepseek.deepseek_api_key:
            logger.error("‚ùå API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return None

        if config.deepseek.deepseek_api_key.startswith("your_"):
            logger.error("‚ùå API –∫–ª—é—á DeepSeek –Ω–µ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!")
            return None

        logger.info(
            f"‚úÖ API –∫–ª—é—á: {'*' * 20}...{config.deepseek.deepseek_api_key[-8:]}",
        )
        logger.info(f"‚úÖ Base URL: {config.deepseek.deepseek_base_url}")
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å: {config.deepseek.deepseek_model}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API...")

        headers = {
            "Authorization": f"Bearer {config.deepseek.deepseek_api_key}",
            "Content-Type": "application/json",
            "User-Agent": "AI-Assistant-Bot/1.0",
        }

        timeout = httpx.Timeout(connect=10.0, read=30.0, write=10.0, pool=10.0)

        async with httpx.AsyncClient(
            base_url=config.deepseek.deepseek_base_url,
            headers=headers,
            timeout=timeout,
        ) as client:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_payload = {
                "model": config.deepseek.deepseek_model,
                "messages": [
                    {"role": "user", "content": "Hello, this is a test."},
                ],
                "max_tokens": 10,
                "temperature": 0.1,
            }

            logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")

            response = await client.post("/v1/chat/completions", json=test_payload)

            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

            if response.status_code == 200:
                logger.success("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                data = response.json()

                if data.get("choices"):
                    content = data["choices"][0].get("message", {}).get("content", "")
                    logger.info(f"ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {content}")

                if "usage" in data:
                    usage = data["usage"]
                    logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {usage}")

                return True

            if response.status_code == 401:
                logger.error("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á!")
                logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ")

            elif response.status_code == 402:
                logger.error("‚ùå –û—à–∏–±–∫–∞ 402: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ!")
                logger.info("üí° –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                logger.info(
                    "   1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç DeepSeek: https://platform.deepseek.com/",
                )
                logger.info("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Billing")
                logger.info("   3. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
                logger.info("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")

            elif response.status_code == 429:
                logger.error("‚ùå –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!")
                logger.info("üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

            elif response.status_code >= 500:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ DeepSeek: {response.status_code}")
                logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ")

            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            try:
                error_data = response.json()
                logger.info(f"üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                logger.info(f"üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

            return False

    except httpx.ConnectError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ URL —Å–µ—Ä–≤–∏—Å–∞")
        return False

    except httpx.TimeoutException:
        logger.error("‚ùå Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å timeout –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ")
        return False

    except Exception as e:
        logger.exception(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


async def check_balance_info():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)."""
    logger.info("üí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...")

    try:
        config = get_config()

        headers = {
            "Authorization": f"Bearer {config.deepseek.deepseek_api_key}",
            "Content-Type": "application/json",
        }

        async with httpx.AsyncClient(
            base_url=config.deepseek.deepseek_base_url,
            headers=headers,
            timeout=httpx.Timeout(10.0),
        ) as client:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            try:
                balance_response = await client.get(
                    "/v1/dashboard/billing/subscription",
                )
                if balance_response.status_code == 200:
                    balance_data = balance_response.json()
                    logger.info(f"üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {balance_data}")
                    return True
            except:
                logger.info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ: {e}")

    return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    logger.add("deepseek_diagnosis.log", rotation="1 MB", retention="1 week")

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ DeepSeek API")
    logger.info("=" * 50)

    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
    api_status = await check_deepseek_api_status()

    logger.info("=" * 50)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    await check_balance_info()

    logger.info("=" * 50)

    if api_status:
        logger.success("üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ DeepSeek API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.error("üòû –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å DeepSeek API")
        logger.info("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        logger.info("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞")
        logger.info("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ DeepSeek")
        logger.info("   4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É DeepSeek –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è")

    logger.info("üìù –õ–æ–≥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: deepseek_diagnosis.log")


if __name__ == "__main__":
    asyncio.run(main())
