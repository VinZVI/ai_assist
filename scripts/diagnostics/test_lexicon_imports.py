"""
@file: scripts/diagnostics/test_lexicon_imports.py
@description: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤
@created: 2025-10-03
"""

import sys
import warnings
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å Python
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))


def test_lexicon_imports() -> bool | None:
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤...")

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–æ–¥—É–ª—è—Ö
    warnings.filterwarnings("ignore", category=DeprecationWarning)

    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤
        from app.lexicon import callbacks, message, start

        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ª–µ–∫—Å–∏–∫–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤
        from app.lexicon import ai_providers, keyboards, utils

        print("‚úÖ –ù–æ–≤—ã–µ –ª–µ–∫—Å–∏–∫–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–≥-–ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏)
        from app.log_lexicon import callbacks as log_callbacks
        from app.log_lexicon import message as log_message
        from app.log_lexicon import start as log_start

        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥-–ª–µ–∫—Å–∏–∫–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –ª–æ–≥-–ª–µ–∫—Å–∏–∫–æ–Ω–æ–≤
        from app.log_lexicon import ai_providers as log_ai_providers
        from app.log_lexicon import keyboards as log_keyboards
        from app.log_lexicon import utils as log_utils

        print("‚úÖ –ù–æ–≤—ã–µ –ª–æ–≥-–ª–µ–∫—Å–∏–∫–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        from app.constants import config, errors

        print("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print(f"‚úÖ START_COMMAND_RECEIVED: {log_start.START_COMMAND_RECEIVED}")
        print(f"‚úÖ MAIN_MENU_START_CHAT: {keyboards.MAIN_MENU_START_CHAT}")
        print(f"‚úÖ AI_PROVIDER_INITIALIZING: {ai_providers.AI_PROVIDER_INITIALIZING}")
        print(f"‚úÖ LOGGING_SYSTEM_INITIALIZED: {utils.LOGGING_SYSTEM_INITIALIZED}")

        print("üéâ –í—Å–µ –ª–µ–∫—Å–∏–∫–æ–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!")
        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = test_lexicon_imports()
    sys.exit(0 if success else 1)
