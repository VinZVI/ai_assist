#!/usr/bin/env python3
"""
Simple script to check if config is working properly
"""

import sys
from pathlib import Path

# Add the project root to the path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger


def test_env_file() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env —Ñ–∞–π–ª–∞."""
    env_path = Path(".env")

    if not env_path.exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    logger.info("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(env_path, encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "BOT_TOKEN",
        "DATABASE_URL",
        "OPENROUTER_API_KEY",
        "SECRET_KEY",
        "ADMIN_USER_ID",
    ]

    missing_vars = []
    for var in required_vars:
        if f"{var}=" not in content:
            missing_vars.append(var)
        else:
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–∞–π–¥–µ–Ω–∞")

    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False

    return True


def main() -> None:
    """Main function."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")

    if test_env_file():
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ!")
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!")


if __name__ == "__main__":
    main()
