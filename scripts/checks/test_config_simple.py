#!/usr/bin/env python3
"""
@file: test_config_simple.py
@description: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dependencies: app.config
@created: 2025-09-12
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from loguru import logger


def test_env_file():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env —Ñ–∞–π–ª–∞."""
    env_path = Path(".env")

    if not env_path.exists():
        logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    logger.info("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(env_path, encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "BOT_TOKEN",
        "DATABASE_URL",
        "DEEPSEEK_API_KEY",
        "SECRET_KEY",
        "ADMIN_USER_ID",
    ]

    missing_vars = []
    for var in required_vars:
        if f"{var}=" not in content:
            missing_vars.append(var)
        else:
            logger.info(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–∞–π–¥–µ–Ω–∞")

    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False

    return True


def test_basic_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        from app.config import DatabaseConfig, TelegramConfig

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DatabaseConfig
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DatabaseConfig...")
        db_config = DatabaseConfig()
        logger.info(f"‚úÖ Database URL: {db_config.database_url}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TelegramConfig
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramConfig...")
        tg_config = TelegramConfig()
        logger.info(f"‚úÖ Bot token: {tg_config.bot_token[:10]}...")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{message}</cyan>",
        level="INFO",
    )

    logger.info("üîß –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    logger.info("-" * 40)

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    logger.info("üî¨ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞")
    env_ok = test_env_file()

    if not env_ok:
        logger.error("üíî –¢–µ—Å—Ç .env —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return

    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info("\nüî¨ –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    config_ok = test_basic_config()

    if config_ok:
        logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        logger.error("üíî –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω")


if __name__ == "__main__":
    main()
