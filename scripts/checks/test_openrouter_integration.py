#!/usr/bin/env python3
"""
@file: test_openrouter_integration.py
@description: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter API
@created: 2025-09-20
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.config import get_config
from app.services.ai_manager import get_ai_manager
from app.services.ai_providers.base import ConversationMessage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

logger = logging.getLogger(__name__)


async def test_openrouter_integration() -> bool | None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenRouter...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º AI –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = get_ai_manager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        health = await manager.health_check()

        logger.info("üìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %s", health["manager_status"])

        for provider_name, provider_health in health["providers"].items():
            status = provider_health.get("status", "unknown")
            logger.info("üìã %s: %s", provider_name, status)

            if status != "healthy":
                error = provider_health.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning("‚ö†Ô∏è %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", provider_name, error)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        openrouter = manager.get_provider("openrouter")
        if openrouter and openrouter.is_configured():
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenRouter API...")

            test_messages = [
                ConversationMessage(
                    role="system",
                    content="–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
                ),
                ConversationMessage(
                    role="user",
                    content="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.",
                ),
            ]

            try:
                # –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç OpenRouter
                response = await manager.generate_response(
                    messages=test_messages,
                    prefer_provider="openrouter",
                    use_cache=False,
                )

                logger.info("‚úÖ OpenRouter —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
                logger.info("ü§ñ –û—Ç–≤–µ—Ç: %s...", response.content[:100])
                logger.info("üìä –ú–æ–¥–µ–ª—å: %s", response.model)
                logger.info("üîó –ü—Ä–æ–≤–∞–π–¥–µ—Ä: %s", response.provider)
                logger.info("‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %.2f—Å", response.response_time)
                logger.info("üéØ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s", response.tokens_used)

            except Exception:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ OpenRouter")
                logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        else:
            logger.warning("‚ö†Ô∏è OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –ª–æ–≥–∏–∫—É
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –ª–æ–≥–∏–∫—É...")

        simple_response = await manager.generate_simple_response(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏",
        )

        logger.info(
            "üîÑ Fallback —Ç–µ—Å—Ç - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: %s",
            simple_response.provider,
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_stats()
        logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        logger.info("   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %s", stats["requests_total"])
        logger.info("   –£—Å–ø–µ—à–Ω—ã—Ö: %s", stats["requests_successful"])
        logger.info("   –ù–µ—É–¥–∞—á–Ω—ã—Ö: %s", stats["requests_failed"])
        logger.info("   Fallback –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: %s —Ä–∞–∑", stats["fallback_used"])

        for provider, provider_stats in stats["provider_stats"].items():
            logger.info(
                "   %s: %s/%s —É—Å–ø–µ—à–Ω–æ",
                provider,
                provider_stats["successes"],
                provider_stats["requests"],
            )

        return True

    except Exception:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ")
        return False

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.close()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    # Remove the logger.add line as it's not compatible with standard logging
    # logger.add("openrouter_test.log", rotation="1 MB", retention="1 week")

    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenRouter")
    logger.info("=" * 50)

    success = await test_openrouter_integration()

    logger.info("=" * 50)

    if success:
        logger.info("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("üòû –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")

    # Remove the log file reference as we're not using loguru
    # logger.info("üìù –õ–æ–≥ —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: openrouter_test.log")


if __name__ == "__main__":
    asyncio.run(main())
