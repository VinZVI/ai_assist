#!/usr/bin/env python3
"""
@file: test_openrouter_simple.py
@description: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenRouter API
@created: 2025-10-07
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from app.config import AppConfig, get_config
from app.services.ai_providers.base import ConversationMessage
from app.services.ai_providers.openrouter import OpenRouterProvider

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

logger = logging.getLogger(__name__)


class SimpleOpenRouterTest:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è OpenRouter API."""

    def __init__(self, api_key: str) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å API –∫–ª—é—á–æ–º."""
        self.api_key = api_key
        self.provider = OpenRouterProvider()

    async def test_simple_request(self, prompt: str) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç OpenRouter API...")
        logger.info("üìù –ó–∞–ø—Ä–æ—Å: %s", prompt)

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º API –∫–ª—é—á–æ–º
            config = get_config()
            config.openrouter.openrouter_api_key = self.api_key

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not self.provider.is_configured():
                logger.error("‚ùå OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return False

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
            messages = [
                ConversationMessage(
                    role="user",
                    content=prompt,
                ),
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter...")
            response = await self.provider.generate_response(messages=messages)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
            logger.info("ü§ñ –û—Ç–≤–µ—Ç: %s", response.content)
            logger.info("üìä –ú–æ–¥–µ–ª—å: %s", response.model)
            logger.info("‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: %.2f—Å", response.response_time)
            logger.info("üéØ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s", response.tokens_used)

            return True

        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter")
            return False

        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            await self.provider.close()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    logger.info("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OpenRouter API")
    logger.info("=" * 50)

    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_key = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á: ").strip()
    if not api_key:
        logger.error("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    tester = SimpleOpenRouterTest(api_key)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ): ").strip()
    if not prompt:
        prompt = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
    success = await tester.test_simple_request(prompt)

    logger.info("=" * 50)

    if success:
        logger.info("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ OpenRouter API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.error("üòû –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")


if __name__ == "__main__":
    asyncio.run(main())
