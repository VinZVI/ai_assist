#!/usr/bin/env python3
"""
@file: clear_webhook.py
@description: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ webhook –∏ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –±–æ—Ç–∞
@created: 2025-09-20
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

import httpx
from loguru import logger

from app.config import get_config


async def clear_webhook() -> bool:
    """–û—á–∏—Å—Ç–∫–∞ webhook –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."""
    logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É webhook...")

    try:
        config = get_config()

        if not config.telegram or not config.telegram.bot_token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False

        bot_token = config.telegram.bot_token
        logger.info(f"ü§ñ –†–∞–±–æ—Ç–∞–µ–º —Å –±–æ—Ç–æ–º: ...{bot_token[-10:]}")

        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
            info_url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
            logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook...")

            info_response = await client.get(info_url)
            if info_response.status_code == 200:
                info_data = info_response.json()
                if info_data.get("ok"):
                    webhook_info = info_data.get("result", {})
                    current_url = webhook_info.get("url", "")
                    pending_updates = webhook_info.get("pending_update_count", 0)

                    logger.info(
                        f"üìä –¢–µ–∫—É—â–∏–π webhook URL: {current_url or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
                    )
                    logger.info(f"üìä –û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pending_updates}")

                    if not current_url:
                        logger.info("‚úÖ Webhook —É–∂–µ –æ—á–∏—â–µ–Ω")
                        return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {info_data}")

            # –û—á–∏—â–∞–µ–º webhook
            delete_url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook"
            logger.info("üóëÔ∏è –û—á–∏—â–∞–µ–º webhook...")

            delete_response = await client.post(
                delete_url,
                json={"drop_pending_updates": True},
            )

            if delete_response.status_code == 200:
                delete_data = delete_response.json()
                if delete_data.get("ok"):
                    logger.success("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    check_response = await client.get(info_url)
                    if check_response.status_code == 200:
                        check_data = check_response.json()
                        if check_data.get("ok"):
                            final_url = check_data.get("result", {}).get("url", "")
                            if not final_url:
                                logger.success("üéâ Webhook –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω!")
                                return True
                            logger.warning(f"‚ö†Ô∏è Webhook –≤—Å–µ –µ—â–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {final_url}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {delete_data}")
            else:
                logger.error(
                    f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: "
                    f"{delete_response.status_code}",
                )

    except httpx.TimeoutException:
        logger.error("‚ùå Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram API")
    except Exception as e:
        logger.exception(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    return False


async def wait_for_conflict_resolution() -> None:
    """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."""
    logger.info("‚è≥ –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (30 —Å–µ–∫—É–Ω–¥)...")
    await asyncio.sleep(30)
    logger.info("‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.add("webhook_clear.log", rotation="1 MB", retention="1 week")

    logger.info("üöÄ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ—á–∏—Å—Ç–∫–∏ webhook")
    logger.info("=" * 50)

    # –û—á–∏—â–∞–µ–º webhook
    success = await clear_webhook()

    if success:
        logger.info("=" * 50)
        await wait_for_conflict_resolution()
        logger.info("=" * 50)
        logger.success("üéâ –ì–æ—Ç–æ–≤–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
        logger.info("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: uv run python main.py")
    else:
        logger.error("üòû –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å webhook")
        logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env")
        logger.info("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API")
        logger.info("   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")


if __name__ == "__main__":
    asyncio.run(main())
