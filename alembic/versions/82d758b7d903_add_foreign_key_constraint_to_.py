"""add foreign key constraint to personality_id in users table

Revision ID: 82d758b7d903
Revises: 202510051500
Create Date: 2025-10-06 12:44:22.254642

"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '82d758b7d903'
down_revision: str | Sequence[str] | None = '202510051500'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('assistant_personalities', 'id',
               existing_type=sa.BIGINT(),
               comment='Уникальный ID персональности',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('assistant_personalities_id_seq'::regclass)"))
    op.alter_column('assistant_personalities', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='Название персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'description',
               existing_type=sa.TEXT(),
               comment='Описание персональности и сценариев общения',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'system_prompt',
               existing_type=sa.TEXT(),
               comment='Системный промпт, определяющий характер ассистента',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Настройки персональности в JSON формате',
               existing_nullable=True)
    op.alter_column('assistant_personalities', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Флаг активности персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'is_adult',
               existing_type=sa.BOOLEAN(),
               comment='Флаг 18+ контента',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления персональности',
               existing_nullable=False)
    op.drop_constraint(op.f('assistant_personalities_name_key'), 'assistant_personalities', type_='unique')
    op.create_index(op.f('ix_assistant_personalities_name'), 'assistant_personalities', ['name'], unique=True)
    op.alter_column('conversations', 'personality_id',
               existing_type=sa.BIGINT(),
               comment='ID персональности ассистента',
               existing_nullable=True)
    op.create_index(op.f('ix_conversations_personality_id'), 'conversations', ['personality_id'], unique=False)
    op.alter_column('users', 'personality_id',
               existing_type=sa.BIGINT(),
               comment='ID выбранной персональности ассистента',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'personality_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='ID выбранной персональности ассистента',
               existing_nullable=True)
    op.drop_index(op.f('ix_conversations_personality_id'), table_name='conversations')
    op.alter_column('conversations', 'personality_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='ID персональности ассистента',
               existing_nullable=True)
    op.drop_index(op.f('ix_assistant_personalities_name'), table_name='assistant_personalities')
    op.create_unique_constraint(op.f('assistant_personalities_name_key'), 'assistant_personalities', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('assistant_personalities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'is_adult',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Флаг 18+ контента',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Флаг активности персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='Настройки персональности в JSON формате',
               existing_nullable=True)
    op.alter_column('assistant_personalities', 'system_prompt',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Системный промпт, определяющий характер ассистента',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Описание персональности и сценариев общения',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Название персональности',
               existing_nullable=False)
    op.alter_column('assistant_personalities', 'id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='Уникальный ID персональности',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('assistant_personalities_id_seq'::regclass)"))
    # ### end Alembic commands ###
