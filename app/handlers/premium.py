"""
@file: handlers/premium.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–µ
@dependencies: aiogram, loguru, sqlalchemy
@created: 2025-10-07
@updated: 2025-10-15
"""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from loguru import logger

from app.config import get_config
from app.lexicon.gettext import get_log_text, get_text
from app.models import User

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã premium
premium_router = Router(name="premium")


@premium_router.message(Command("premium"))
async def handle_premium_command(message: Message, user: User) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–µ.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º–µ
        logger.info(
            get_log_text("premium.premium_command_processed").format(user_id=user.id)
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang_code = user.language_code if user.language_code else "ru"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º–µ
        premium_text = f"<b>{get_text('premium.title', lang_code)}</b>\n\n"
        premium_text += f"{get_text('premium.description', lang_code)}\n\n"
        premium_text += f"{get_text('premium.price', lang_code).format(price=config.user_limits.premium_price)}\n"
        premium_text += f"{get_text('premium.duration', lang_code).format(days=config.user_limits.premium_duration_days)}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
        premium_text += "<b>üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        for benefit in get_text("premium.benefits", lang_code):
            premium_text += f"‚Ä¢ {benefit}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        premium_text += (
            "\n<b>üíñ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        )
        premium_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        premium_text += "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 100 –≤ –¥–µ–Ω—å)\n"
        premium_text += (
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        )
        premium_text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        premium_text += "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–¥–æ 24 —á–∞—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏)\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(premium_text, parse_mode="HTML")

        logger.info(
            get_log_text("premium.premium_command_processed").format(user_id=user.id)
        )

    except Exception as e:
        logger.error(
            get_log_text("premium.premium_command_error").format(
                user_id=user.id, error=e
            )
        )
        try:
            await message.answer(get_text("errors.general_error"))
        except Exception as send_error:
            logger.error(
                get_log_text("premium.premium_error_sending_message").format(
                    error=send_error,
                )
            )
