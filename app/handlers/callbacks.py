"""
@file: handlers/callbacks.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
@dependencies: aiogram, sqlalchemy
@created: 2025-09-14
"""

from datetime import datetime

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from loguru import logger

from app.config import get_config
from app.database import get_session
from app.keyboards import (
    create_back_button,
    create_help_keyboard,
    create_language_keyboard,
    create_main_menu_keyboard,
    create_payment_keyboard,
    create_premium_features_keyboard,
    create_premium_keyboard,
    create_settings_keyboard,
    create_stats_keyboard,
)
from app.models import User

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
callback_router = Router()


@callback_router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        await callback.message.edit_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_menu_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "start_chat")
async def start_chat(callback: CallbackQuery) -> None:
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."""
    try:
        await callback.message.edit_text(
            "üí¨ **–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥!**\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º. "
            "–Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—Å –∏ –æ–∫–∞–∑–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            "‚ú® *–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –æ —á—ë–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?*",
            reply_markup=create_back_button("main_menu"),
            parse_mode="Markdown",
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "my_stats")
async def show_my_stats(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not callback.from_user:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        async with get_session() as session:
            from sqlalchemy import select
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(User).where(User.telegram_id == callback.from_user.id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            premium_status = "üíé –ê–∫—Ç–∏–≤–µ–Ω" if user.is_premium_active() else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            
            stats_text = (
                f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get_display_name()}\n"
                f"üóìÔ∏è **–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:** {user.created_at.strftime('%d.%m.%Y')}\n"
                f"üíé **–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å:** {premium_status}\n\n"
                f"üìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user.daily_message_count}\n"
                f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user.total_messages}\n"
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity_at.strftime('%d.%m.%Y %H:%M') if user.last_activity_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            )

            await callback.message.edit_text(
                stats_text,
                reply_markup=create_stats_keyboard(),
                parse_mode="Markdown",
            )
            await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@callback_router.callback_query(F.data == "premium_info")
async def show_premium_info(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º–µ."""
    try:
        config = get_config()
        premium_price = config.user_limits.premium_price if config.user_limits else 99
        free_limit = config.user_limits.free_messages_limit if config.user_limits else 10

        premium_text = (
            f"üíé **–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø**\n\n"
            f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω:**\n"
            f"‚Ä¢ {free_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ò–ò\n\n"
            f"üíé **–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω ({premium_price}‚ÇΩ):**\n"
            f"‚Ä¢ ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            f"‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò\n"
            f"‚Ä¢ üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ üîí –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 30 –¥–Ω–µ–π\n"
            f"üí≥ **–û–ø–ª–∞—Ç–∞:** Telegram Stars"
        )

        await callback.message.edit_text(
            premium_text,
            reply_markup=create_premium_keyboard(premium_price),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data.startswith("buy_premium:"))
async def buy_premium(callback: CallbackQuery) -> None:
    """–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø."""
    try:
        premium_price = int(callback.data.split(":")[1])
        
        payment_text = (
            f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞**\n\n"
            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {premium_price} Telegram Stars\n"
            f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 30 –¥–Ω–µ–π\n\n"
            f"üîê **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )

        await callback.message.edit_text(
            payment_text,
            reply_markup=create_payment_keyboard(premium_price),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "premium_features")
async def show_premium_features(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π."""
    try:
        features_text = (
            "üíé **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è—Ö**\n\n"
            "üöÄ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É\n\n"
            "‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**\n"
            "‚Ä¢ –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤\n\n"
            "üß† **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò:**\n"
            "‚Ä¢ –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏ –≤–¥—É–º—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –æ–±—â–µ–Ω–∏—è\n\n"
            "üí¨ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å\n\n"
            "üîí **–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤"
        )

        await callback.message.edit_text(
            features_text,
            reply_markup=create_premium_features_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–µ–º–∏—É–º–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å."""
    try:
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å**\n\n"
            "ü§ñ **–û –±–æ—Ç–µ:**\n"
            "–Ø - –≤–∞—à AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
            "–ú–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—Å, –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
            "üí¨ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç–∞\n\n"
            "üîí **–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
            "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"
        )

        await callback.message.edit_text(
            help_text,
            reply_markup=create_help_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        settings_text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:"
        )

        await callback.message.edit_text(
            settings_text,
            reply_markup=create_settings_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@callback_router.callback_query(F.data == "settings_language")
async def show_language_settings(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞."""
    try:
        language_text = (
            "üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
        )

        await callback.message.edit_text(
            language_text,
            reply_markup=create_language_keyboard(),
            parse_mode="Markdown",
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback'–æ–≤
@callback_router.callback_query(F.data.in_([
    "detailed_stats", "achievements", "settings_notifications", 
    "settings_delete_data", "lang_ru", "lang_en", "help_guide", 
    "help_faq", "help_support", "help_bug_report", "premium_faq",
    "other_payment_methods"
]))
async def placeholder_callback(callback: CallbackQuery) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    await callback.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")


@callback_router.callback_query(F.data.startswith("pay_stars:"))
async def pay_with_stars(callback: CallbackQuery) -> None:
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars (–∑–∞–≥–ª—É—à–∫–∞)."""
    try:
        premium_price = int(callback.data.split(":")[1])
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments API
        await callback.answer(
            f"üöß –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars ({premium_price} ‚≠ê) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            show_alert=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.")


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ["callback_router"]