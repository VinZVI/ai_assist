"""
@file: handlers/admin.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
@dependencies: aiogram, loguru
@created: 2025-10-10
"""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from loguru import logger

from app.config import get_config
from app.database import get_session
from app.lexicon.gettext import get_log_text
from app.services.ai_manager import get_ai_manager

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
admin_router = Router(name="admin")


@admin_router.message(Command("health"))
async def admin_health_check(message: Message, is_admin: bool = False) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /health —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∏–∑ middleware)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—á–µ—Ä–µ–∑ middleware)
    if not is_admin:
        logger.warning(
            get_log_text("admin.unauthorized_access").format(
                user_id=message.from_user.id if message.from_user else "unknown",
                command="/health",
            )
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        )
        return

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ health check
        logger.info(
            get_log_text("admin.health_check_requested").format(
                admin_id=message.from_user.id
            )
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        config_status = "healthy" if config else "unhealthy"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_status = "unknown"
        try:
            async with get_session() as session:
                await session.execute("SELECT 1")
            db_status = "healthy"
        except Exception as e:
            db_status = f"unhealthy: {e!s}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        ai_manager = get_ai_manager()
        ai_health = await ai_manager.health_check()
        ai_status = ai_health["manager_status"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        health_report = f"""üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Health Check</b>

<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b> {config_status}
<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}
<b>AI –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:</b> {ai_status}

<b>–î–µ—Ç–∞–ª–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:</b>
"""

        for provider_name, provider_health in ai_health["providers"].items():
            status = provider_health.get("status", "unknown")
            error = provider_health.get("error", "")
            health_report += f"‚Ä¢ {provider_name}: {status}"
            if error:
                health_report += f" ({error})"
            health_report += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        await message.answer(health_report, parse_mode="HTML")
        logger.info(get_log_text("admin.health_check_completed"))

    except Exception as e:
        logger.error(
            get_log_text("admin.health_check_error").format(
                admin_id=message.from_user.id if message.from_user else "unknown",
                error=str(e),
            )
        )
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ healthcheck: {e}")
