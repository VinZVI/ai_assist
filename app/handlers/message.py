"""
@file: message.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤
              —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
@dependencies: aiogram, sqlalchemy, loguru, app.services.ai_manager
@created: 2025-09-12
@updated: 2025-09-20
"""

from datetime import UTC, datetime

from aiogram import F, Router
from aiogram.types import Message
from aiogram.utils.markdown import bold, italic
from loguru import logger
from sqlalchemy import desc, select
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import get_config
from app.constants.errors import (
    AI_ALL_PROVIDERS_FAILED,
    AI_AUTH_ERROR,
    AI_CONNECTION_ERROR,
    AI_EMPTY_RESPONSE_ERROR,
    AI_INVALID_RESPONSE_ERROR,
    AI_PROVIDER_ERROR,
    AI_RATE_LIMIT_ERROR,
    AI_TIMEOUT_ERROR,
    CONVERSATION_HISTORY_ERROR,
    CONVERSATION_SAVE_ERROR,
    DB_CONNECTION_ERROR,
    DB_INTEGRITY_ERROR,
    DB_SQLALCHEMY_ERROR,
    USER_CREATION_ERROR,
    USER_NOT_FOUND_ERROR,
    USER_UPDATE_ERROR,
)
from app.constants.errors import (
    AI_QUOTA_ERROR as AI_QUOTA_ERROR_CONST,
)
from app.database import get_session
from app.lexicon.ai_prompts import create_system_message
from app.lexicon.message import (
    AI_ALL_PROVIDERS_DOWN,
    AI_GENERAL_ERROR,
    AI_QUOTA_ERROR,
    AI_UNEXPECTED_ERROR,
    DAILY_LIMIT_EXCEEDED,
    MESSAGE_TOO_LONG,
    PROCESSING_ERROR,
    USER_REGISTRATION_ERROR,
)
from app.log_lexicon.message import (
    MESSAGE_AI_GENERATING,
    MESSAGE_AI_RESPONSE,
    MESSAGE_AI_RESPONSE_GENERATED,
    MESSAGE_CONVERSATION_SAVE_ERROR,
    MESSAGE_CONVERSATION_SAVED,
    MESSAGE_ERROR,
    MESSAGE_PROCESSING,
    MESSAGE_RECEIVED,
    MESSAGE_SENT,
    MESSAGE_USER_LIMIT_EXCEEDED,
)
from app.models.conversation import Conversation, ConversationStatus
from app.models.user import User
from app.services.ai_manager import AIProviderError, get_ai_manager
from app.services.ai_providers.base import ConversationMessage
from app.services.conversation_service import (
    get_recent_conversation_history,
    save_conversation,
)
from app.services.user_service import get_or_update_user

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
message_router = Router()


async def generate_ai_response(
    user: User,
    user_message: str,
) -> tuple[str, int, str, float]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.

    Returns:
        tuple: (response_text, tokens_used, model_name, response_time)
    """
    try:
        ai_manager = get_ai_manager()
        start_time = datetime.now(UTC)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        async with get_session() as session:
            conversation_history = await get_recent_conversation_history(
                session,
                user.id,
                limit=6,  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±–º–µ–Ω–∞
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = [create_system_message()]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        messages.extend(conversation_history)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append(
            ConversationMessage(
                role="user",
                content=user_message,
            ),
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        response = await ai_manager.generate_response(
            messages=messages,
            temperature=0.8,  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–º–ø–∞—Ç–∏–∏
            max_tokens=1000,
        )

        response_time = (datetime.now(UTC) - start_time).total_seconds()

        logger.info(
            MESSAGE_AI_RESPONSE.format(
                provider=response.provider,
                chars=len(response.content),
                tokens=response.tokens_used,
                duration=f"{response.response_time:.2f}",
            )
        )

        return response.content, response.tokens_used, response.model, response_time

    except AIProviderError as e:
        error_msg = str(e)
        provider = getattr(e, "provider", "unknown")
        logger.error(AI_PROVIDER_ERROR.format(provider=provider, error=error_msg))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º/–∫–≤–æ—Ç–æ–π
        if any(
            keyword in error_msg.lower()
            for keyword in [
                "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                "quota",
                "billing",
                "payment",
                "402",
            ]
        ):
            return (
                AI_QUOTA_ERROR,
                0,
                "quota_error",
                0.0,
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
        if "–≤—Å–µ ai –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã" in error_msg.lower():
            return (
                AI_ALL_PROVIDERS_DOWN,
                0,
                "all_providers_down",
                0.0,
            )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π fallback –æ—Ç–≤–µ—Ç
        return (
            AI_GENERAL_ERROR,
            0,
            "fallback",
            0.0,
        )

    except Exception:
        logger.exception("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞")
        return (
            AI_UNEXPECTED_ERROR,
            0,
            "error",
            0.0,
        )


@message_router.message(F.text)
async def handle_text_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        logger.info(
            MESSAGE_RECEIVED.format(
                username=message.from_user.username or f"ID:{message.from_user.id}",
                chars=len(message.text[:50]),
            )
            + f"... ({message.text[:50]})"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_update_user(message)
        if not user:
            await message.answer(USER_REGISTRATION_ERROR)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not user.can_send_message():
            await message.answer(DAILY_LIMIT_EXCEEDED)
            logger.info(MESSAGE_USER_LIMIT_EXCEEDED.format(user_id=user.id))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message.text) > 4000:
            await message.answer(MESSAGE_TOO_LONG)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action="typing",
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        logger.info(MESSAGE_AI_GENERATING)
        (
            ai_response,
            tokens_used,
            model_name,
            response_time,
        ) = await generate_ai_response(user, message.text)
        logger.info(
            MESSAGE_AI_RESPONSE_GENERATED.format(response=ai_response[:50] + "...")
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
        async with get_session() as session:
            success = await save_conversation(
                session=session,
                user_id=user.id,
                user_message=message.text,
                ai_response=ai_response,
                ai_model=model_name,
                tokens_used=tokens_used,
                response_time=response_time,
            )

            if not success:
                logger.error(CONVERSATION_SAVE_ERROR.format(user_id=user.id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = f"{ai_response}"

        await message.answer(
            response_text,
            parse_mode="Markdown",
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.increment_message_count()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            session.add(user)
            await session.commit()
        logger.info(
            MESSAGE_SENT.format(
                username=message.from_user.username or f"ID:{message.from_user.id}",
                chars=len(response_text),
                tokens=tokens_used,
                duration=f"{response_time:.2f}",
            )
        )

    except Exception as e:
        logger.exception(
            MESSAGE_ERROR.format(
                user_id=getattr(message.from_user, "id", "unknown"), error=e
            )
        )
        await message.answer(PROCESSING_ERROR)
