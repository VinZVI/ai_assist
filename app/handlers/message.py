"""
@file: message.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤
@dependencies: aiogram, sqlalchemy, loguru
@created: 2025-09-12
"""

from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message
from loguru import logger

from app.config import get_config
from app.database import get_session
from app.models import Conversation, User
from app.services import AIServiceError, ConversationMessage, get_ai_service

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
message_router = Router()


async def get_or_update_user(message: Message) -> User | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not message.from_user:
        return None

    async with get_session() as session:
        try:
            from sqlalchemy import select
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            stmt = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()

            if not user:
                logger.warning(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è /start")
                return None

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user.last_activity_at = datetime.utcnow()
            await session.commit()

            return user

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await session.rollback()
            return None


async def get_recent_conversation_history(
    session,
    user_id: int,
    limit: int = 10,
) -> list[ConversationMessage]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from sqlalchemy import desc, select
        from app.models.conversation import MessageRole, ConversationStatus

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        stmt = (
            select(Conversation)
            .where(
                (Conversation.user_id == user_id) &
                (Conversation.status == ConversationStatus.COMPLETED)
            )
            .order_by(desc(Conversation.created_at))
            .limit(limit)
        )

        result = await session.execute(stmt)
        conversations = result.scalars().all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ ConversationMessage
        messages = []
        for conv in reversed(conversations):  # –û–±—Ä–∞—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if conv.message_text:
                messages.append(
                    ConversationMessage(
                        role="user",
                        content=conv.message_text,
                        timestamp=conv.created_at,
                    ),
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if conv.response_text:
                messages.append(
                    ConversationMessage(
                        role="assistant",
                        content=conv.response_text,
                        timestamp=conv.processed_at or conv.created_at,
                    ),
                )

        return messages[-limit:] if len(messages) > limit else messages

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []


async def save_conversation(
    session,
    user_id: int,
    user_message: str,
    ai_response: str,
    ai_model: str,
    tokens_used: int,
    response_time: float,
) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from app.models.conversation import ConversationStatus, MessageRole
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_conv = Conversation(
            user_id=user_id,
            message_text=user_message,
            response_text=ai_response,
            role=MessageRole.USER,
            status=ConversationStatus.COMPLETED,
            ai_model=ai_model,
            tokens_used=tokens_used,
            response_time_ms=int(response_time * 1000),  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º—Å
            created_at=datetime.utcnow(),
            processed_at=datetime.utcnow(),
        )
        session.add(user_conv)

        await session.commit()
        logger.debug(f"üíæ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
        await session.rollback()
        return False


def create_system_message() -> ConversationMessage:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI."""
    return ConversationMessage(
        role="system",
        content=(
            "–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. "
            "–û—Ç–≤–µ—á–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º. "
            "–ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —á—É–≤—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ò–∑–±–µ–≥–∞–π –¥–∞–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—Ä–∏–∑–∏—Å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        ),
    )


async def generate_ai_response(user: User, user_message: str) -> tuple[str, int, str, float]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI.
    
    Returns:
        tuple: (response_text, tokens_used, model_name, response_time)
    """
    try:
        ai_service = get_ai_service()
        start_time = datetime.utcnow()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        async with get_session() as session:
            conversation_history = await get_recent_conversation_history(
                session, user.id, limit=6,  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–±–º–µ–Ω–∞
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è AI
        messages = [create_system_message()]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        messages.extend(conversation_history)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append(
            ConversationMessage(
                role="user",
                content=user_message,
            ),
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await ai_service.generate_response(
            messages=messages,
            temperature=0.8,  # –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–º–ø–∞—Ç–∏–∏
            max_tokens=1000,
        )

        response_time = (datetime.utcnow() - start_time).total_seconds()

        return response.content, response.tokens_used, response.model, response_time

    except AIServiceError as e:
        error_msg = str(e)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {error_msg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
        if "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in error_msg.lower() or "402" in error_msg:
            return (
                "üí≥ –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å API —Å–µ—Ä–≤–∏—Å–æ–º.\n"
                "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                "üï∞Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                0,
                "api_error",
                0.0,
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç
        return (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. "
            "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            0,
            "fallback",
            0.0,
        )

    except Exception:
        logger.exception("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –æ—Ç–≤–µ—Ç–∞")
        return (
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            0,
            "error",
            0.0,
        )


@message_router.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
    4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
    5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not message.from_user or not message.text:
        logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞")
        return

    user_id = message.from_user.id
    user_text = message.text

    logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(user_text)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_text.strip()) < 2:
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).",
        )
        return

    if len(user_text) > 2000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await message.answer(
            "‚ö†Ô∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.",
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_update_user(message)
    if not user:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        )
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    user.reset_daily_count_if_needed()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if not user.can_send_message():
        config = get_config()
        if config.user_limits:
            premium_price = config.user_limits.premium_price
            free_messages_limit = config.user_limits.free_messages_limit
        else:
            premium_price = 99
            free_messages_limit = 10

        await message.answer(
            f"üö´ **–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç: {free_messages_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user.daily_message_count}\n\n"
            f"üíé **–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø** ({premium_price}‚ÇΩ):\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="Markdown",
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if message.bot:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        ai_response, tokens_used, model_name, response_time = await generate_ai_response(user, user_text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user_db = await session.get(User, user.id)
            if user_db:
                user_db.daily_message_count += 1
                user_db.total_messages += 1
                await session.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
                await save_conversation(
                    session=session,
                    user_id=user.id,
                    user_message=user_text,
                    ai_response=ai_response,
                    ai_model=model_name,
                    tokens_used=tokens_used,
                    response_time=response_time,
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            text=ai_response,
            parse_mode="Markdown",
        )

        logger.info(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: "
            f"{len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤, {tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, "
            f"{response_time:.2f}—Å",
        )

    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        )


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
__all__ = ["message_router"]
