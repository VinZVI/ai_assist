"""
@file: handlers/language.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dependencies: aiogram, sqlalchemy
@created: 2025-10-07
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from loguru import logger

from app.database import get_session
from app.keyboards import create_language_keyboard
from app.lexicon.gettext import get_log_text, get_text
from app.models import User

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_router = Router(name="language")


@language_router.message(Command("language"))
async def handle_language_command(message: Message, user: User) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_language = user.language_code or "ru"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
        keyboard = create_language_keyboard(current_language)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        await message.answer(
            f"üåê <b>{get_text('language.title', current_language)}</b>\n\n"
            f"{get_text('language.current_language', current_language, language=get_text('language.available_languages.' + current_language, current_language))}\n\n"
            f"{get_text('language.select_language', current_language)}",
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        logger.info(
            get_log_text("language.language_command_processed").format(user_id=user.id)
        )

    except Exception as e:
        logger.error(
            get_log_text("language.language_command_error").format(
                user_id=user.id, error=e
            )
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        await message.answer(get_text("errors.general_error", "ru"))


@language_router.callback_query(F.data.startswith("select_language:"))
async def handle_language_selection(callback: CallbackQuery, user: User) -> None:  # noqa: ARG001
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback.

    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É callback –µ—Å—Ç—å data
    if not callback.data:
        await callback.answer(get_text("errors.general_error", "ru"))
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        lang_code = callback.data.split(":")[1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        supported_languages = ["ru", "en"]
        if lang_code not in supported_languages:
            await callback.answer(get_text("errors.general_error", "ru"))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É callback –µ—Å—Ç—å message –∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if not callback.message:
            await callback.answer(get_text("errors.general_error", "ru"))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ InaccessibleMessage)
        from aiogram.types import InaccessibleMessage

        if isinstance(callback.message, InaccessibleMessage):
            await callback.answer(get_text("errors.general_error", "ru"))
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with get_session() as session:
            from sqlalchemy import update

            # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_stmt = (
                update(User)
                .where(User.telegram_id == callback.from_user.id)
                .values(language_code=lang_code)
            )
            await session.execute(update_stmt)
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
            language_name = get_text(
                f"language.available_languages.{lang_code}", lang_code
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            await callback.message.edit_text(
                f"‚úÖ {get_text('language.language_changed', lang_code, language=language_name)}",
                parse_mode="HTML",
            )

            await callback.answer()

            logger.info(
                get_log_text("language.language_changed_success").format(
                    user_id=callback.from_user.id, language=lang_code
                )
            )

    except Exception as e:
        logger.error(
            get_log_text("language.language_selection_error").format(
                user_id=callback.from_user.id, error=e
            )
        )
        await callback.answer(get_text("errors.general_error", "ru"))
