"""
@file: handlers/start.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dependencies: aiogram, sqlalchemy
@created: 2025-09-12
"""

from datetime import UTC, datetime, timezone

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.types import User as TgUser
from loguru import logger
from sqlalchemy.exc import IntegrityError

from app.config import AppConfig, get_config
from app.database import get_session
from app.keyboards import create_main_menu_keyboard
from app.lexicon.start import (
    COMMANDS_INFO,
    FIRST_MESSAGE_TEXT,
    FIRST_MESSAGE_TITLE,
    FUNCTIONALITY_ITEMS,
    FUNCTIONALITY_TITLE,
    LIMITS_FREE,
    LIMITS_TITLE,
    LIMITS_USED,
    PREMIUM_ACTIVE,
    PREMIUM_INFO,
    PREMIUM_INFO_TITLE,
    REGISTRATION_ERROR,
    UNEXPECTED_ERROR,
    WELCOME_INTRO,
    WELCOME_TITLE,
)
from app.log_lexicon.start import (
    START_COMMAND_ERROR,
    START_COMMAND_PROCESSED,
    START_COMMAND_RECEIVED,
    START_ERROR_SENDING_MESSAGE,
    START_NEW_USER_CREATED,
    START_UNEXPECTED_ERROR,
    START_USER_CREATION_ERROR,
    START_USER_INFO_UPDATED,
)
from app.models import User, UserCreate

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã start
start_router = Router(name="start")


async def get_or_create_user(telegram_user: TgUser) -> User | None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.

    Args:
        telegram_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    Returns:
        User: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    async with get_session() as session:
        try:
            from sqlalchemy import select

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(User).where(User.telegram_id == telegram_user.id)
            result = await session.execute(stmt)
            existing_user = result.scalar_one_or_none()

            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                user_updated = False

                if existing_user.username != telegram_user.username:
                    existing_user.username = telegram_user.username
                    user_updated = True

                if existing_user.first_name != telegram_user.first_name:
                    existing_user.first_name = telegram_user.first_name
                    user_updated = True

                if existing_user.last_name != telegram_user.last_name:
                    existing_user.last_name = telegram_user.last_name
                    user_updated = True

                if existing_user.language_code != telegram_user.language_code:
                    existing_user.language_code = telegram_user.language_code
                    user_updated = True

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                existing_user.last_activity_at = datetime.now(UTC)
                existing_user.updated_at = datetime.now(UTC)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
                existing_user.reset_daily_count_if_needed()

                if user_updated:
                    await session.commit()
                    logger.info(
                        START_USER_INFO_UPDATED.format(user_id=telegram_user.id)
                    )

                return existing_user

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user_data = UserCreate(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
                language_code=telegram_user.language_code or "ru",
            )

            new_user = User(
                telegram_id=new_user_data.telegram_id,
                username=new_user_data.username,
                first_name=new_user_data.first_name,
                last_name=new_user_data.last_name,
                language_code=new_user_data.language_code,
                last_activity_at=datetime.now(UTC),
            )

            session.add(new_user)
            await session.commit()
            await session.refresh(new_user)

            logger.info(
                START_NEW_USER_CREATED.format(
                    user_id=telegram_user.id, username=telegram_user.username
                )
            )
            return new_user

        except IntegrityError as e:
            await session.rollback()
            logger.error(
                START_USER_CREATION_ERROR.format(user_id=telegram_user.id, error=e)
            )
            return None

        except Exception as e:
            await session.rollback()
            logger.error(
                START_UNEXPECTED_ERROR.format(user_id=telegram_user.id, error=e)
            )
            return None


def format_welcome_message(user: User, config: AppConfig) -> str:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    display_name = user.get_display_name()

    # –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"""
ü§ñ <b>{WELCOME_TITLE.format(display_name=display_name)}</b>

{WELCOME_INTRO}

<b>{FUNCTIONALITY_TITLE}</b>
"""
    for item in FUNCTIONALITY_ITEMS:
        welcome_text += f"‚Ä¢ {item}\n"

    welcome_text += f"""
<b>{LIMITS_TITLE}</b>
‚Ä¢ {LIMITS_FREE.format(free_limit=config.user_limits.free_messages_limit)}
‚Ä¢ {LIMITS_USED.format(used=user.daily_message_count, total=config.user_limits.free_messages_limit)}
"""

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user.is_premium_active():
        welcome_text += f"\n{PREMIUM_ACTIVE}"
    else:
        welcome_text += f"""
<b>{PREMIUM_INFO_TITLE}</b>
{
            PREMIUM_INFO.format(
                price=config.user_limits.premium_price,
                days=config.user_limits.premium_duration_days,
            )
        }
"""

    welcome_text += f"\n\n{COMMANDS_INFO}"

    return welcome_text


@start_router.message(CommandStart())
async def handle_start_command(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å—Ç–∞—Ä—Ç–∞
        user_info = (
            f"@{message.from_user.username}"
            if message.from_user.username
            else f"ID:{message.from_user.id}"
        )
        logger.info(START_COMMAND_RECEIVED.format(user_info=user_info))

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = await get_or_create_user(message.from_user)

        if user is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                REGISTRATION_ERROR,
                parse_mode="HTML",
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = format_welcome_message(user, config)

        await message.answer(
            welcome_message,
            parse_mode="HTML",
            reply_markup=create_main_menu_keyboard(),
            disable_web_page_preview=True,
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.total_messages == 0:
            await message.answer(
                f"{FIRST_MESSAGE_TITLE}\n\n{FIRST_MESSAGE_TEXT}",
                parse_mode="HTML",
            )

        logger.info(START_COMMAND_PROCESSED.format(user_id=message.from_user.id))

    except Exception as e:
        logger.error(START_COMMAND_ERROR.format(user_id=message.from_user.id, error=e))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await message.answer(
                UNEXPECTED_ERROR,
                parse_mode="HTML",
            )
        except Exception as send_error:
            logger.error(START_ERROR_SENDING_MESSAGE.format(error=send_error))


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ["start_router"]
