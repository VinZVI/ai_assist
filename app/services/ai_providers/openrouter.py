"""
@file: ai_providers/openrouter.py
@description: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI –¥–ª—è OpenRouter API
@dependencies: httpx, loguru, app.config, .base
@created: 2025-09-20
"""

import asyncio
from typing import Any

import httpx
from loguru import logger

from app.config import get_config

from .base import (
    AIResponse,
    APIAuthenticationError,
    APIConnectionError,
    APIQuotaExceededError,
    APIRateLimitError,
    BaseAIProvider,
    ConversationMessage,
)


class OpenRouterProvider(BaseAIProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä AI –¥–ª—è OpenRouter API."""

    def __init__(self) -> None:
        super().__init__("openrouter")
        self.config = get_config().openrouter
        self._client: httpx.AsyncClient | None = None
        self._max_retries = 3
        self._retry_delay = 1.0
        self._current_model_index = 0

    @property
    def provider_name(self) -> str:
        return "openrouter"

    @property
    def current_model(self) -> str:
        """Get the currently selected model."""
        if not self.config.openrouter_models:
            return "openrouter/default-model"
        return self.config.openrouter_models[self._current_model_index]

    def _get_next_model(self) -> str | None:
        """Get the next model in the list for fallback, or None if no more models."""
        if not self.config.openrouter_models:
            return None

        next_index = (self._current_model_index + 1) % len(
            self.config.openrouter_models
        )
        if next_index == 0:
            # We've cycled through all models
            return None

        self._current_model_index = next_index
        return self.config.openrouter_models[self._current_model_index]

    def reset_model_index(self) -> None:
        """Reset the model index to the first model."""
        self._current_model_index = 0

    async def _get_client(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è OpenRouter."""
        if self._client is None:
            headers = {
                "Authorization": f"Bearer {self.config.openrouter_api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": self.config.openrouter_site_url,
                "X-Title": self.config.openrouter_app_name,
            }

            timeout = httpx.Timeout(
                connect=5.0,
                read=self.config.openrouter_timeout,
                write=5.0,
                pool=5.0,
            )

            self._client = httpx.AsyncClient(
                base_url=self.config.openrouter_base_url,
                headers=headers,
                timeout=timeout,
                limits=httpx.Limits(
                    max_keepalive_connections=5,
                    max_connections=10,
                ),
            )
            logger.info("üîó HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenRouter API —Å–æ–∑–¥–∞–Ω")

        return self._client

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞."""
        if self._client:
            await self._client.aclose()
            self._client = None
            logger.info("üîå HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenRouter API –∑–∞–∫—Ä—ã—Ç")

    def is_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        return self.config.is_configured()

    async def _make_api_request(
        self,
        messages: list[dict[str, str]],
        temperature: float,
        max_tokens: int,
        model: str,
    ) -> dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API —Å retry –ª–æ–≥–∏–∫–æ–π."""
        client = await self._get_client()

        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "stream": False,
        }

        for attempt in range(self._max_retries):
            try:
                logger.debug(
                    f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})",
                )
                start_time = asyncio.get_event_loop().time()

                response = await client.post("/chat/completions", json=payload)
                response_time = self._calculate_response_time(start_time)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 200:
                    logger.info(
                        f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API –∑–∞ {response_time:.2f}—Å",
                    )
                    return response.json()

                if response.status_code == 401:
                    msg = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenRouter"
                    raise APIAuthenticationError(
                        msg,
                        self.provider_name,
                        "401",
                    )

                if response.status_code == 402:
                    msg = (
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ OpenRouter API. "
                        "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ OpenRouter."
                    )
                    raise APIQuotaExceededError(
                        msg,
                        self.provider_name,
                        "402",
                    )

                if response.status_code == 429:
                    if attempt < self._max_retries - 1:
                        delay = self._retry_delay * (2**attempt)
                        logger.warning(
                            f"‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤ OpenRouter. "
                            f"–û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å...",
                        )
                        await asyncio.sleep(delay)
                        continue
                    msg = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenRouter API"
                    raise APIRateLimitError(
                        msg,
                        self.provider_name,
                        "429",
                    )

                if response.status_code >= 500:
                    if attempt < self._max_retries - 1:
                        delay = self._retry_delay * (attempt + 1)
                        logger.warning(
                            f"üîÑ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenRouter {response.status_code}. "
                            f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...",
                        )
                        await asyncio.sleep(delay)
                        continue
                    msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ OpenRouter: {response.status_code}"
                    raise APIConnectionError(
                        msg,
                        self.provider_name,
                        str(response.status_code),
                    )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                error_text = ""
                try:
                    error_data = response.json()
                    error_text = error_data.get("error", {}).get("message", "")
                except:
                    error_text = response.text

                msg = (
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ OpenRouter: {response.status_code}. "
                    f"{error_text}"
                )
                raise APIConnectionError(
                    msg,
                    self.provider_name,
                    str(response.status_code),
                )

            except httpx.TimeoutException:
                if attempt < self._max_retries - 1:
                    delay = self._retry_delay * (attempt + 1)
                    logger.warning(
                        f"‚è∞ Timeout –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...",
                    )
                    await asyncio.sleep(delay)
                    continue
                msg = "Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API"
                raise APIConnectionError(
                    msg,
                    self.provider_name,
                    "timeout",
                )

            except httpx.ConnectError:
                if attempt < self._max_retries - 1:
                    delay = self._retry_delay * (attempt + 1)
                    logger.warning(
                        f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...",
                    )
                    await asyncio.sleep(delay)
                    continue
                msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenRouter API"
                raise APIConnectionError(
                    msg,
                    self.provider_name,
                    "connection_error",
                )

        msg = "–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter API"
        raise APIConnectionError(
            msg,
            self.provider_name,
            "max_retries_exceeded",
        )

    async def generate_response(
        self,
        messages: list[ConversationMessage],
        temperature: float | None = None,
        max_tokens: int | None = None,
        **kwargs: Any,
    ) -> AIResponse:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter AI."""
        if not messages:
            msg = "–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            raise ValueError(msg)

        if not self.is_configured():
            msg = "OpenRouter API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY –≤ .env"
            raise APIAuthenticationError(
                msg,
                self.provider_name,
                "not_configured",
            )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        temperature = temperature or self.config.openrouter_temperature
        max_tokens = max_tokens or self.config.openrouter_max_tokens

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not 0.0 <= temperature <= 2.0:
            msg = "Temperature –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 2.0"
            raise ValueError(msg)

        if not 1 <= max_tokens <= 8000:
            msg = "max_tokens –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 8000"
            raise ValueError(msg)

        # Reset model index at the beginning of each request
        self.reset_model_index()

        # Try each model in order until one works
        last_exception = None
        while True:
            current_model = self.current_model
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                prepared_messages = self._prepare_messages(messages)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                start_time = asyncio.get_event_loop().time()
                data = await self._make_api_request(
                    prepared_messages,
                    temperature,
                    max_tokens,
                    current_model,
                )
                response_time = self._calculate_response_time(start_time)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                if "choices" not in data or not data["choices"]:
                    msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API"
                    raise APIConnectionError(
                        msg,
                        self.provider_name,
                        "invalid_response",
                    )

                choice = data["choices"][0]
                content = choice.get("message", {}).get("content", "")

                if not content:
                    msg = "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API"
                    raise APIConnectionError(
                        msg,
                        self.provider_name,
                        "empty_response",
                    )

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                tokens_used = data.get("usage", {}).get(
                    "total_tokens",
                    len(content.split()) * 1.3,
                )

                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "model_used": data.get("model", current_model),
                    "finish_reason": choice.get("finish_reason"),
                    "usage": data.get("usage", {}),
                }

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
                ai_response = AIResponse(
                    content=content.strip(),
                    model=current_model,
                    tokens_used=int(tokens_used),
                    response_time=response_time,
                    provider=self.provider_name,
                    cached=False,
                    metadata=metadata,
                )

                logger.info(
                    f"ü§ñ OpenRouter –æ—Ç–≤–µ—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, "
                    f"{tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, {response_time:.2f}—Å –∏—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å {current_model}",
                )
                return ai_response

            except (
                APIAuthenticationError,
                APIQuotaExceededError,
            ) as e:
                # These are fatal errors, don't try other models
                logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ OpenRouter: {e}")
                raise

            except (
                APIConnectionError,
                APIRateLimitError,
            ) as e:
                # These are retryable errors, try the next model if available
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ {current_model}: {e}")
                last_exception = e

                # Try to get the next model
                next_model = self._get_next_model()
                if next_model is None:
                    # No more models to try
                    logger.error("üí• –í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    # Include the list of models that were tried in the error message
                    models_tried = ", ".join(self.config.openrouter_models)
                    raise APIConnectionError(
                        f"–í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {last_exception!s}. –ü–æ–ø—ã—Ç–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏: {models_tried}",
                        self.provider_name,
                    ) from last_exception

                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å: {next_model}")
                continue

        # If we get here, something went wrong
        unknown_error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π OpenRouter"
        if last_exception:
            # Include the list of models that were tried in the error message
            models_tried = ", ".join(self.config.openrouter_models)
            raise APIConnectionError(
                f"–í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {last_exception!s}. –ü–æ–ø—ã—Ç–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏: {models_tried}",
                self.provider_name,
            ) from last_exception
        raise APIConnectionError(unknown_error_message, self.provider_name)

    async def health_check(self) -> dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OpenRouter API."""
        try:
            if not self.is_configured():
                return {
                    "status": "unhealthy",
                    "error": "OpenRouter API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    "provider": self.provider_name,
                }

            test_messages = [
                ConversationMessage(role="user", content="Hello"),
            ]

            start_time = asyncio.get_event_loop().time()
            response = await self.generate_response(test_messages)
            response_time = self._calculate_response_time(start_time)

            return {
                "status": "healthy",
                "provider": self.provider_name,
                "model": self.current_model,
                "response_time": response_time,
                "tokens_used": response.tokens_used,
            }

        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "provider": self.provider_name,
                "model": self.current_model,
            }


# –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
__all__ = ["OpenRouterProvider"]
