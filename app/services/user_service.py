from datetime import UTC, datetime
from typing import TYPE_CHECKING

from aiogram.types import Message
from loguru import logger
from sqlalchemy import select

from app.database import get_session
from app.lexicon.gettext import get_log_text
from app.models.user import User


async def get_or_update_user(message: Message) -> User | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

    Returns:
        User –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not message.from_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return None

    try:
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()

            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º language_code
                user.username = message.from_user.username
                user.first_name = message.from_user.first_name
                user.last_name = message.from_user.last_name
                user.last_activity_at = datetime.now(UTC)

                # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å
                if user.reset_daily_count_if_needed():
                    user.daily_message_count = 0
                    user.last_message_date = datetime.now(UTC).date()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    language_code=message.from_user.language_code or "ru",
                    last_activity_at=datetime.now(UTC),
                    last_message_date=datetime.now(UTC).date(),
                )
                session.add(user)

            await session.commit()
            await session.refresh(user)

            logger.info(
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'–æ–±–Ω–æ–≤–ª–µ–Ω' if user.id else '—Å–æ–∑–¥–∞–Ω'}: {user.get_display_name()}"
            )
            return user

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", exc_info=e)
        return None
