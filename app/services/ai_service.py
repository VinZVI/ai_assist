"""
@file: ai_service.py
@description: –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DeepSeek API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
@dependencies: httpx, asyncio, loguru, typing
@created: 2025-09-12
"""

import asyncio
import hashlib
import json
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any

import httpx
from loguru import logger

from app.config import get_config


@dataclass
class AIResponse:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞."""
    content: str
    model: str
    tokens_used: int
    response_time: float
    cached: bool = False


@dataclass
class ConversationMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ."""
    role: str  # "user", "assistant", "system"
    content: str
    timestamp: datetime | None = None


class AIServiceError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ AI —Å–µ—Ä–≤–∏—Å–∞."""


class APIConnectionError(AIServiceError):
    """–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API."""


class APIRateLimitError(AIServiceError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""


class APIAuthenticationError(AIServiceError):
    """–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""


class ResponseCache:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ AI."""

    def __init__(self, ttl_seconds: int = 3600):
        self._cache: dict[str, dict[str, Any]] = {}
        self._ttl = ttl_seconds

    def _generate_key(self, messages: list[ConversationMessage], model: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        content = json.dumps([
            {"role": msg.role, "content": msg.content}
            for msg in messages
        ]) + model
        return hashlib.md5(content.encode()).hexdigest()

    def get(self, messages: list[ConversationMessage], model: str) -> AIResponse | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫–µ—à–∞."""
        key = self._generate_key(messages, model)

        if key in self._cache:
            entry = self._cache[key]
            if datetime.now() - entry["timestamp"] < timedelta(seconds=self._ttl):
                logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª—é—á–∞: {key[:8]}...")
                response = entry["response"]
                response.cached = True
                return response
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á
            del self._cache[key]

        return None

    def set(self, messages: list[ConversationMessage], model: str, response: AIResponse) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–µ—à."""
        key = self._generate_key(messages, model)
        self._cache[key] = {
            "response": response,
            "timestamp": datetime.now(),
        }
        logger.debug(f"üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à —Å –∫–ª—é—á–æ–º: {key[:8]}...")

    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞."""
        self._cache.clear()
        logger.info("üßπ –ö–µ—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")


class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API."""

    def __init__(self):
        self.config = get_config()
        self._client: httpx.AsyncClient | None = None
        self._cache = ResponseCache(ttl_seconds=self.config.redis.cache_ttl)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._default_temperature = self.config.deepseek.deepseek_temperature
        self._default_max_tokens = self.config.deepseek.deepseek_max_tokens
        self._timeout = self.config.deepseek.deepseek_timeout
        self._max_retries = 3
        self._retry_delay = 1.0

    async def _get_client(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        if self._client is None:
            headers = {
                "Authorization": f"Bearer {self.config.deepseek.deepseek_api_key}",
                "Content-Type": "application/json",
                "User-Agent": "AI-Assistant-Bot/1.0",
            }

            timeout = httpx.Timeout(
                connect=5.0,
                read=self._timeout,
                write=5.0,
                pool=5.0,
            )

            self._client = httpx.AsyncClient(
                base_url=self.config.deepseek.deepseek_base_url,
                headers=headers,
                timeout=timeout,
                limits=httpx.Limits(
                    max_keepalive_connections=5,
                    max_connections=10,
                ),
            )
            logger.info("üîó HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è DeepSeek API —Å–æ–∑–¥–∞–Ω")

        return self._client

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞."""
        if self._client:
            await self._client.aclose()
            self._client = None
            logger.info("üîå HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è DeepSeek API –∑–∞–∫—Ä—ã—Ç")

    def _prepare_messages(self, messages: list[ConversationMessage]) -> list[dict[str, str]]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API."""
        prepared = []

        for msg in messages:
            prepared.append({
                "role": msg.role,
                "content": msg.content,
            })

        return prepared

    async def _make_api_request(
        self,
        messages: list[dict[str, str]],
        temperature: float,
        max_tokens: int,
    ) -> dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å retry –ª–æ–≥–∏–∫–æ–π."""
        client = await self._get_client()

        payload = {
            "model": self.config.deepseek.deepseek_model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens,
            "stream": False,
        }

        for attempt in range(self._max_retries):
            try:
                logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                start_time = asyncio.get_event_loop().time()

                response = await client.post("/v1/chat/completions", json=payload)

                response_time = asyncio.get_event_loop().time() - start_time

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 200:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API –∑–∞ {response_time:.2f}—Å")
                    data = response.json()
                    return data

                if response.status_code == 401:
                    raise APIAuthenticationError("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á DeepSeek")

                if response.status_code == 429:
                    if attempt < self._max_retries - 1:
                        delay = self._retry_delay * (2 ** attempt)  # Exponential backoff
                        logger.warning(f"‚è≥ Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –û–∂–∏–¥–∞–Ω–∏–µ {delay}—Å...")
                        await asyncio.sleep(delay)
                        continue
                    raise APIRateLimitError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek API")

                if response.status_code >= 500:
                    if attempt < self._max_retries - 1:
                        delay = self._retry_delay * (attempt + 1)
                        logger.warning(f"üîÑ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {response.status_code}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                        await asyncio.sleep(delay)
                        continue
                    raise APIConnectionError(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ DeepSeek: {response.status_code}")

                raise APIConnectionError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

            except httpx.TimeoutException:
                if attempt < self._max_retries - 1:
                    delay = self._retry_delay * (attempt + 1)
                    logger.warning(f"‚è∞ Timeout –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    await asyncio.sleep(delay)
                    continue
                raise APIConnectionError("Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek API")

            except httpx.ConnectError:
                if attempt < self._max_retries - 1:
                    delay = self._retry_delay * (attempt + 1)
                    logger.warning(f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    await asyncio.sleep(delay)
                    continue
                raise APIConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ DeepSeek API")

        raise APIConnectionError("–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")

    async def generate_response(
        self,
        messages: list[ConversationMessage],
        temperature: float | None = None,
        max_tokens: int | None = None,
        use_cache: bool = True,
    ) -> AIResponse:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI.
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-2.0)
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞
        """
        if not messages:
            raise ValueError("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        temperature = temperature or self._default_temperature
        max_tokens = max_tokens or self._default_max_tokens

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not 0.0 <= temperature <= 2.0:
            raise ValueError("Temperature –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 2.0")

        if not 1 <= max_tokens <= 4000:
            raise ValueError("max_tokens –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4000")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if use_cache:
            cached_response = self._cache.get(messages, self.config.deepseek.deepseek_model)
            if cached_response:
                return cached_response

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            prepared_messages = self._prepare_messages(messages)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            start_time = asyncio.get_event_loop().time()
            data = await self._make_api_request(prepared_messages, temperature, max_tokens)
            response_time = asyncio.get_event_loop().time() - start_time

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            if "choices" not in data or not data["choices"]:
                raise APIConnectionError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API")

            choice = data["choices"][0]
            content = choice.get("message", {}).get("content", "")

            if not content:
                raise APIConnectionError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            tokens_used = data.get("usage", {}).get("total_tokens", len(content.split()) * 1.3)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
            ai_response = AIResponse(
                content=content.strip(),
                model=self.config.deepseek.deepseek_model,
                tokens_used=int(tokens_used),
                response_time=response_time,
                cached=False,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            if use_cache:
                self._cache.set(messages, self.config.deepseek.deepseek_model, ai_response)

            logger.info(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤, {tokens_used} —Ç–æ–∫–µ–Ω–æ–≤")
            return ai_response

        except AIServiceError:
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ—à–∏–±–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            raise

        except Exception as e:
            logger.exception("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI")
            raise AIServiceError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e!s}")

    async def generate_simple_response(self, user_message: str) -> AIResponse:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI —Å–µ—Ä–≤–∏—Å–∞
        """
        messages = [
            ConversationMessage(
                role="system",
                content="–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
            ),
            ConversationMessage(
                role="user",
                content=user_message,
            ),
        ]

        return await self.generate_response(messages)

    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –æ—Ç–≤–µ—Ç–æ–≤."""
        self._cache.clear()

    async def health_check(self) -> dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            test_messages = [
                ConversationMessage(role="user", content="Hello"),
            ]

            start_time = asyncio.get_event_loop().time()
            response = await self.generate_response(test_messages, use_cache=False)
            response_time = asyncio.get_event_loop().time() - start_time

            return {
                "status": "healthy",
                "model": self.config.deepseek.deepseek_model,
                "response_time": response_time,
                "tokens_used": response.tokens_used,
                "cache_enabled": True,
            }

        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "model": self.config.deepseek.deepseek_model,
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
_ai_service_instance: AIService | None = None


def get_ai_service() -> AIService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI —Å–µ—Ä–≤–∏—Å–∞."""
    global _ai_service_instance

    if _ai_service_instance is None:
        _ai_service_instance = AIService()
        logger.info("ü§ñ AI —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    return _ai_service_instance


async def close_ai_service() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞."""
    global _ai_service_instance

    if _ai_service_instance:
        await _ai_service_instance.close()
        _ai_service_instance = None
        logger.info("üîå AI —Å–µ—Ä–≤–∏—Å –∑–∞–∫—Ä—ã—Ç")


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "AIResponse",
    "AIService",
    "AIServiceError",
    "APIAuthenticationError",
    "APIConnectionError",
    "APIRateLimitError",
    "ConversationMessage",
    "close_ai_service",
    "get_ai_service",
]
