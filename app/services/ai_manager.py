"""
@file: ai_manager.py
@description: –ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
@dependencies: loguru, app.config, .ai_providers
@created: 2025-09-20
"""

import asyncio
import hashlib
import json
from datetime import datetime, timedelta
from typing import Any

from loguru import logger

from app.config import get_config
from .ai_providers import (
    AIResponse,
    ConversationMessage,
    AIProviderError,
    APIConnectionError,
    APIRateLimitError,
    APIAuthenticationError,
    APIQuotaExceededError,
    DeepSeekProvider,
    OpenRouterProvider,
)


class ResponseCache:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""

    def __init__(self, ttl_seconds: int = 3600):
        self._cache: dict[str, dict[str, Any]] = {}
        self._ttl = ttl_seconds

    def _generate_key(self, messages: list[ConversationMessage], provider: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        content = json.dumps([
            {"role": msg.role, "content": msg.content}
            for msg in messages
        ]) + provider
        return hashlib.md5(content.encode()).hexdigest()

    def get(self, messages: list[ConversationMessage], provider: str) -> AIResponse | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –∫–µ—à–∞."""
        key = self._generate_key(messages, provider)

        if key in self._cache:
            entry = self._cache[key]
            if datetime.now() - entry["timestamp"] < timedelta(seconds=self._ttl):
                logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {provider}: {key[:8]}...")
                response = entry["response"]
                response.cached = True
                return response
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á
            del self._cache[key]

        return None

    def set(self, messages: list[ConversationMessage], provider: str, response: AIResponse) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–µ—à."""
        key = self._generate_key(messages, provider)
        self._cache[key] = {
            "response": response,
            "timestamp": datetime.now(),
        }
        logger.debug(f"üíæ –û—Ç–≤–µ—Ç {provider} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à: {key[:8]}...")

    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞."""
        self._cache.clear()
        logger.info("üßπ –ö–µ—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")


class AIManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏."""
    
    def __init__(self):
        self.config = get_config()
        self.provider_config = self.config.ai_provider
        self._cache = ResponseCache(ttl_seconds=self.config.redis.cache_ttl)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self._providers: dict[str, Any] = {}
        self._initialize_providers()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats = {
            "requests_total": 0,
            "requests_successful": 0,
            "requests_failed": 0,
            "fallback_used": 0,
            "provider_stats": {},
        }
    
    def _initialize_providers(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
        
        # DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            deepseek = DeepSeekProvider()
            if deepseek.is_configured():
                self._providers["deepseek"] = deepseek
                logger.info("‚úÖ DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è DeepSeek –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek: {e}")
        
        # OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try:
            openrouter = OpenRouterProvider()
            if openrouter.is_configured():
                self._providers["openrouter"] = openrouter
                logger.info("‚úÖ OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenRouter: {e}")
        
        if not self._providers:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        else:
            logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {list(self._providers.keys())}")
    
    def get_provider(self, provider_name: str) -> Any | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏."""
        return self._providers.get(provider_name)
    
    def get_primary_provider(self) -> Any | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        return self.get_provider(self.provider_config.primary_provider)
    
    def get_fallback_provider(self) -> Any | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        return self.get_provider(self.provider_config.fallback_provider)
    
    async def _try_provider(
        self, 
        provider: Any, 
        messages: list[ConversationMessage],
        temperature: float | None = None,
        max_tokens: int | None = None,
        use_cache: bool = True,
    ) -> AIResponse:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        provider_name = provider.provider_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if use_cache:
            cached_response = self._cache.get(messages, provider_name)
            if cached_response:
                logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider_name}")
                return cached_response
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if not await provider.is_available():
            raise APIConnectionError(
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                provider_name,
                "unavailable"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info(f"üöÄ –ó–∞–ø—Ä–æ—Å –∫ {provider_name}...")
        response = await provider.generate_response(
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        if use_cache:
            self._cache.set(messages, provider_name, response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(provider_name, success=True)
        
        return response
    
    async def generate_response(
        self,
        messages: list[ConversationMessage],
        temperature: float | None = None,
        max_tokens: int | None = None,
        use_cache: bool = True,
        prefer_provider: str | None = None,
    ) -> AIResponse:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            prefer_provider: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ primary/fallback)
        
        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Raises:
            AIProviderError: –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        """
        if not messages:
            raise ValueError("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        self._stats["requests_total"] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if prefer_provider and prefer_provider in self._providers:
            provider_order = [prefer_provider]
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ fallback –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            if self.provider_config.enable_fallback:
                provider_order.extend([
                    name for name in self._providers.keys() 
                    if name != prefer_provider
                ])
        else:
            provider_order = [self.provider_config.primary_provider]
            if (self.provider_config.enable_fallback and 
                self.provider_config.fallback_provider != self.provider_config.primary_provider):
                provider_order.append(self.provider_config.fallback_provider)
        
        last_error = None
        
        for i, provider_name in enumerate(provider_order):
            provider = self.get_provider(provider_name)
            if not provider:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            try:
                logger.info(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {provider_name}")
                response = await self._try_provider(
                    provider=provider,
                    messages=messages,
                    temperature=temperature,
                    max_tokens=max_tokens,
                    use_cache=use_cache,
                )
                
                if i > 0:  # Fallback –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                    self._stats["fallback_used"] += 1
                    logger.info(f"üîÑ Fallback —É—Å–ø–µ—à–µ–Ω: {provider_name}")
                
                self._stats["requests_successful"] += 1
                return response
                
            except (APIQuotaExceededError, APIAuthenticationError) as e:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è fallback
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {provider_name}: {e}")
                last_error = e
                self._update_stats(provider_name, success=False)
                break
                
            except (APIConnectionError, APIRateLimitError) as e:
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å fallback
                logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {provider_name}: {e}")
                last_error = e
                self._update_stats(provider_name, success=False)
                continue
                
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                logger.exception(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {provider_name}: {e}")
                last_error = AIProviderError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", provider_name)
                self._update_stats(provider_name, success=False)
                continue
        
        # –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        self._stats["requests_failed"] += 1
        
        if last_error:
            raise last_error
        else:
            raise AIProviderError(
                "–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                "manager",
                "all_providers_failed"
            )
    
    async def generate_simple_response(self, user_message: str) -> AIResponse:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        messages = [
            ConversationMessage(
                role="system",
                content="–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ.",
            ),
            ConversationMessage(
                role="user",
                content=user_message,
            ),
        ]
        
        return await self.generate_response(messages)
    
    def _update_stats(self, provider_name: str, success: bool) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."""
        if provider_name not in self._stats["provider_stats"]:
            self._stats["provider_stats"][provider_name] = {
                "requests": 0,
                "successes": 0,
                "failures": 0,
            }
        
        stats = self._stats["provider_stats"][provider_name]
        stats["requests"] += 1
        
        if success:
            stats["successes"] += 1
        else:
            stats["failures"] += 1
    
    def get_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        return self._stats.copy()
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –æ—Ç–≤–µ—Ç–æ–≤."""
        self._cache.clear()
    
    async def health_check(self) -> dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
        results = {
            "manager_status": "healthy",
            "providers": {},
            "statistics": self.get_stats(),
        }
        
        for name, provider in self._providers.items():
            try:
                health = await provider.health_check()
                results["providers"][name] = health
            except Exception as e:
                results["providers"][name] = {
                    "status": "unhealthy",
                    "error": str(e),
                    "provider": name,
                }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        healthy_providers = sum(
            1 for p in results["providers"].values() 
            if p.get("status") == "healthy"
        )
        
        if healthy_providers == 0:
            results["manager_status"] = "unhealthy"
        elif healthy_providers < len(self._providers):
            results["manager_status"] = "degraded"
        
        return results
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
        for name, provider in self._providers.items():
            try:
                await provider.close()
                logger.info(f"üîå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {name} –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {name}: {e}")
        
        self._providers.clear()
        logger.info("üîå AI –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä—ã—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
_ai_manager_instance: AIManager | None = None


def get_ai_manager() -> AIManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    global _ai_manager_instance
    
    if _ai_manager_instance is None:
        _ai_manager_instance = AIManager()
        logger.info("ü§ñ AI –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return _ai_manager_instance


async def close_ai_manager() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    global _ai_manager_instance
    
    if _ai_manager_instance:
        await _ai_manager_instance.close()
        _ai_manager_instance = None
        logger.info("üîå AI –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä—ã—Ç")


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "ResponseCache",
    "AIManager",
    "get_ai_manager",
    "close_ai_manager",
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ ai_providers –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    "AIResponse",
    "ConversationMessage",
    "AIProviderError",
]