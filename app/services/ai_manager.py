"""
@file: ai_manager.py
@description: –ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback
@dependencies: pydantic, loguru, app.config, app.services.ai_providers
@created: 2025-09-12
"""

from datetime import UTC, datetime, timedelta, timezone
from typing import Any, ClassVar

from loguru import logger

from app.config import get_config
from app.services.ai_providers import OpenRouterProvider
from app.services.ai_providers.base import (
    AIProviderError,
    AIResponse,
    APIAuthenticationError,
    APIConnectionError,
    APIQuotaExceededError,
    APIRateLimitError,
    BaseAIProvider,
    ConversationMessage,
)


class AIManager:
    _providers: ClassVar[dict[str, BaseAIProvider]] = {}
    _cache: dict[str, dict[str, AIResponse | datetime]] = {}
    _ttl: int = 60
    _stats: ClassVar[dict[str, int]] = {
        "requests_total": 0,
        "requests_successful": 0,
        "requests_failed": 0,
        "fallback_used": 0,
    }
    _provider_stats: ClassVar[dict[str, dict[str, int]]] = {}

    def __init__(self) -> None:
        self._config = get_config()
        # Initialize providers - only OpenRouter now
        self._providers = {
            "openrouter": OpenRouterProvider(),
        }
        # Initialize provider stats
        for provider_name in self._providers:
            self._provider_stats[provider_name] = {
                "requests": 0,
                "successes": 0,
                "failures": 0,
            }

    def get_provider(self, name: str) -> BaseAIProvider | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏."""
        return self._providers.get(name)

    async def generate_response(
        self,
        messages: list[ConversationMessage],
        prefer_provider: str | None = None,
        temperature: float = 0.7,
        max_tokens: int | None = None,
        use_cache: bool = True,
    ) -> AIResponse:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.

        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
            prefer_provider: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ

        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        # –•–µ—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        messages_hash = hash(str([(m.role, m.content) for m in messages]))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if use_cache and messages_hash in self._cache:
            entry = self._cache[messages_hash]
            if datetime.now(UTC) - entry["timestamp"] < timedelta(seconds=self._ttl):
                logger.debug("üéØ –ù–∞–π–¥–µ–Ω –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                cached_response = entry["response"]
                return AIResponse(
                    content=cached_response.content,
                    model=cached_response.model,
                    tokens_used=cached_response.tokens_used,
                    response_time=0.01,  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∫–µ—à–∞
                    provider=cached_response.provider,
                    cached=True,
                )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        self._stats["requests_total"] += 1

        # Only one provider now - OpenRouter
        provider_name = "openrouter"
        provider = self._providers[provider_name]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if not provider.is_configured():
            logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            msg = "OpenRouter API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENROUTER_API_KEY –≤ .env"
            raise APIAuthenticationError(
                msg,
                provider_name,
                "not_configured",
            )

        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            self._provider_stats[provider_name]["requests"] += 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            start_time = datetime.now(UTC)
            response = await provider.generate_response(
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens,
            )
            response_time = (datetime.now(UTC) - start_time).total_seconds()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—Ö–∞
            self._stats["requests_successful"] += 1
            self._provider_stats[provider_name]["successes"] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            if use_cache:
                self._cache[messages_hash] = {
                    "response": response,
                    "timestamp": datetime.now(UTC),
                }

            logger.info(
                f"ü§ñ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç {provider_name}: "
                f"{len(response.content)} —Å–∏–º–≤–æ–ª–æ–≤, "
                f"{response.tokens_used} —Ç–æ–∫–µ–Ω–æ–≤, "
                f"{response_time:.2f}—Å"
            )

            return response

        except (
            APIAuthenticationError,
            APIConnectionError,
            APIQuotaExceededError,
            APIRateLimitError,
        ) as e:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self._stats["requests_failed"] += 1
            self._provider_stats[provider_name]["failures"] += 1

            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {e}")
            raise AIProviderError(
                f"AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e!s}",
                provider_name,
            ) from e

    async def generate_simple_response(self, prompt: str) -> AIResponse:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

        Args:
            prompt: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            AIResponse: –û—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        messages = [
            ConversationMessage(
                role="user",
                content=prompt,
            ),
        ]
        return await self.generate_response(messages)

    async def health_check(self) -> dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.

        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç—Ä–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        provider_health = {}
        all_healthy = True

        for provider_name, provider in self._providers.items():
            try:
                if not provider.is_configured():
                    provider_health[provider_name] = {
                        "status": "not_configured",
                        "error": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    }
                    all_healthy = False
                    continue

                health_result = await provider.health_check()
                provider_health[provider_name] = health_result

                if health_result.get("status") != "healthy":
                    all_healthy = False

            except Exception as e:
                provider_health[provider_name] = {
                    "status": "unhealthy",
                    "error": str(e),
                }
                all_healthy = False

        return {
            "manager_status": "healthy" if all_healthy else "degraded",
            "providers": provider_health,
        }

    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        for provider in self._providers.values():
            try:
                await provider.close()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider.name}: {e}")

        # –û—á–∏—â–∞–µ–º –∫–µ—à
        self._cache.clear()
        logger.info("üîå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã, –∫–µ—à –æ—á–∏—â–µ–Ω")

    def get_stats(self) -> dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return {
            "requests_total": self._stats["requests_total"],
            "requests_successful": self._stats["requests_successful"],
            "requests_failed": self._stats["requests_failed"],
            "fallback_used": self._stats["fallback_used"],
            "provider_stats": self._provider_stats,
        }

    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞."""
        self._cache.clear()
        logger.info("üßπ –ö–µ—à AIManager –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
_ai_manager_instance: AIManager | None = None


def get_ai_manager() -> AIManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    global _ai_manager_instance

    if _ai_manager_instance is None:
        _ai_manager_instance = AIManager()
        logger.info("ü§ñ AI –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    return _ai_manager_instance


async def close_ai_manager() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    global _ai_manager_instance

    if _ai_manager_instance:
        await _ai_manager_instance.close()
        _ai_manager_instance = None
        logger.info("üîå AI –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫—Ä—ã—Ç")


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "AIManager",
    "close_ai_manager",
    "get_ai_manager",
]
