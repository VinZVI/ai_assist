"""
@file: web.py
@description: –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck –∏ webhook endpoint
@dependencies: fastapi, uvicorn, loguru
@created: 2025-10-05
@updated: 2025-10-15
"""

import asyncio
import time
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager
from typing import Any

import psutil
from fastapi import FastAPI, Request, Response, status
from fastapi.responses import JSONResponse
from loguru import logger

from app.config import get_config
from app.database import check_connection, close_db, init_db
from app.middleware.anti_spam import AntiSpamMiddleware
from app.middleware.content_filter import ContentFilterMiddleware
from app.middleware.emotional_profiling import EmotionalProfilingMiddleware
from app.middleware.message_counter import MessageCountingMiddleware
from app.middleware.metrics import MetricsMiddleware
from app.middleware.rate_limit import RateLimitMiddleware
from app.services.ai_manager import get_ai_manager
from app.services.analytics import analytics_service
from app.services.monitoring import monitoring_service

# Global variables for metrics
_request_count = 0
_error_count = 0
_start_time = asyncio.get_event_loop().time()


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:  # noqa: ARG001
    """Lifespan manager for the FastAPI application."""
    global _start_time
    _start_time = asyncio.get_event_loop().time()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        await monitoring_service.start_monitoring()
        await analytics_service.start_analytics_collection()
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    yield

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try:
        await monitoring_service.stop_monitoring()
        await analytics_service.stop_analytics_collection()
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await close_db()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω API",
    description="API –¥–ª—è Telegram –±–æ—Ç–∞ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω",
    version="1.0.0",
    lifespan=lifespan,
)


@app.get("/health")
async def health_check() -> JSONResponse:
    """
    Healthcheck endpoint with detailed system metrics.

    Returns:
        JSONResponse: Detailed status of the application
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        if not config:
            return JSONResponse(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                content={
                    "status": "error",
                    "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                    "timestamp": time.time(),
                    "components": {
                        "config": "error",
                        "database": "unknown",
                        "ai_providers": "unknown",
                    },
                },
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_status = await check_connection()
        db_status_str = "healthy" if db_status else "unhealthy"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        ai_manager = get_ai_manager()
        ai_health = await ai_manager.health_check()
        ai_status = ai_health["manager_status"]

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware
        anti_spam_stats = AntiSpamMiddleware.get_anti_spam_stats()
        content_filter_stats = ContentFilterMiddleware.get_content_filter_stats()
        # emotional_stats = {}  # Placeholder for emotional profiling stats (removed as unused)
        message_count_stats = MessageCountingMiddleware.get_message_count_stats()
        metrics_stats = MetricsMiddleware.get_metrics_stats()
        rate_limit_stats = RateLimitMiddleware.get_rate_limit_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = _get_system_metrics()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = "healthy"
        if not db_status or ai_status != "healthy":
            overall_status = "degraded"

        # –í—ã—á–∏—Å–ª—è–µ–º uptime
        uptime = asyncio.get_event_loop().time() - _start_time

        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "status": overall_status,
                "message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                "timestamp": time.time(),
                "uptime_seconds": uptime,
                "components": {
                    "config": "healthy",
                    "database": db_status_str,
                    "ai_providers": ai_status,
                },
                "details": {
                    "ai_providers": ai_health["providers"],
                    "middleware_stats": {
                        "anti_spam": anti_spam_stats,
                        "content_filter": content_filter_stats,
                        "message_counting": message_count_stats,
                        "metrics": metrics_stats,
                        "rate_limit": rate_limit_stats,
                    },
                    "system_metrics": system_metrics,
                },
            },
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ healthcheck: {e}",
                "timestamp": time.time(),
                "components": {
                    "config": "unknown",
                    "database": "unknown",
                    "ai_providers": "unknown",
                },
            },
        )


@app.get("/metrics")
async def metrics_endpoint() -> JSONResponse:
    """
    Metrics endpoint for monitoring and scaling decisions with system metrics.

    Returns:
        JSONResponse: Detailed metrics about the application
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        ai_manager = get_ai_manager()
        ai_stats = ai_manager.get_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware
        anti_spam_stats = AntiSpamMiddleware.get_anti_spam_stats()
        content_filter_stats = ContentFilterMiddleware.get_content_filter_stats()
        message_count_stats = MessageCountingMiddleware.get_message_count_stats()
        metrics_stats = MetricsMiddleware.get_metrics_stats()
        rate_limit_stats = RateLimitMiddleware.get_rate_limit_stats()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = _get_system_metrics()

        # –í—ã—á–∏—Å–ª—è–µ–º uptime
        uptime = asyncio.get_event_loop().time() - _start_time

        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "timestamp": time.time(),
                "uptime_seconds": uptime,
                "ai_stats": ai_stats,
                "middleware_stats": {
                    "anti_spam": anti_spam_stats,
                    "content_filter": content_filter_stats,
                    "message_counting": message_count_stats,
                    "metrics": metrics_stats,
                    "rate_limit": rate_limit_stats,
                },
                "system_metrics": system_metrics,
            },
        )
    except Exception as e:
        logger.error(f"Metrics endpoint failed: {e}")
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}",
                "timestamp": time.time(),
            },
        )


@app.get("/analytics")
async def analytics_endpoint(hours: int = 24) -> JSONResponse:
    """
    Analytics endpoint for detailed performance insights.

    Args:
        hours: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Å–∞—Ö

    Returns:
        JSONResponse: Detailed analytics report
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics_data = await analytics_service.collect_analytics()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        analytics_report = analytics_service.get_analytics_report(hours)

        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "timestamp": time.time(),
                "analytics_data": analytics_data,
                "analytics_report": analytics_report,
            },
        )
    except Exception as e:
        logger.error(f"Analytics endpoint failed: {e}")
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}",
                "timestamp": time.time(),
            },
        )


@app.get("/analytics/report")
async def analytics_report_endpoint(hours: int = 24) -> JSONResponse:
    """
    Analytics report endpoint for business insights.

    Args:
        hours: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Å–∞—Ö

    Returns:
        JSONResponse: Analytics report
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        analytics_report = analytics_service.get_analytics_report(hours)

        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "timestamp": time.time(),
                "report": analytics_report,
            },
        )
    except Exception as e:
        logger.error(f"Analytics report endpoint failed: {e}")
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}",
                "timestamp": time.time(),
            },
        )


def _get_system_metrics() -> dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

    Returns:
        dict: –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ CPU
        cpu_percent = psutil.cpu_percent(interval=1)

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        memory_available = memory.available
        memory_total = memory.total

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫–∞
        disk = psutil.disk_usage("/")
        disk_percent = (disk.used / disk.total) * 100
        disk_free = disk.free
        disk_total = disk.total

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
        net_io = psutil.net_io_counters()
        bytes_sent = net_io.bytes_sent
        bytes_recv = net_io.bytes_recv

        return {
            "cpu_percent": cpu_percent,
            "memory_percent": memory_percent,
            "memory_available_bytes": memory_available,
            "memory_total_bytes": memory_total,
            "disk_percent": disk_percent,
            "disk_free_bytes": disk_free,
            "disk_total_bytes": disk_total,
            "network_bytes_sent": bytes_sent,
            "network_bytes_received": bytes_recv,
        }
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {e}"}


@app.post("/webhook")
async def telegram_webhook(request: Request) -> Response:  # noqa: ARG001
    """
    Telegram webhook endpoint.

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram

    Returns:
        Response: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ aiogram
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return Response(status_code=status.HTTP_200_OK)


@app.get("/")
async def root() -> JSONResponse:
    """
    Root endpoint.

    Returns:
        JSONResponse: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    return JSONResponse(
        status_code=status.HTTP_200_OK,
        content={"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω API", "version": "1.0.0"},
    )


if __name__ == "__main__":
    import uvicorn

    config = get_config()

    uvicorn.run(
        "app.web:app",
        host="0.0.0.0",  # noqa: S104
        port=8000,
        reload=config.debug,
        log_level=config.log_level.lower(),
    )
