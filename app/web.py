"""
@file: web.py
@description: –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck –∏ webhook endpoint
@dependencies: fastapi, uvicorn, loguru
@created: 2025-10-05
"""

import asyncio
from collections.abc import AsyncGenerator
from contextlib import asynccontextmanager
from typing import Any

from fastapi import FastAPI, Request, Response, status
from fastapi.responses import JSONResponse
from loguru import logger

from app.config import get_config
from app.database import check_connection, close_db, init_db
from app.services.ai_manager import get_ai_manager


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:  # noqa: ARG001
    """Lifespan manager for the FastAPI application."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    yield

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await close_db()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω API",
    description="API –¥–ª—è Telegram –±–æ—Ç–∞ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω",
    version="1.0.0",
    lifespan=lifespan,
)


@app.get("/health")
async def health_check() -> JSONResponse:
    """
    Healthcheck endpoint.

    Returns:
        JSONResponse: –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        if not config:
            return JSONResponse(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                content={
                    "status": "error",
                    "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
                    "components": {
                        "config": "error",
                        "database": "unknown",
                        "ai_providers": "unknown",
                    },
                },
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_status = await check_connection()
        db_status_str = "healthy" if db_status else "unhealthy"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        ai_manager = get_ai_manager()
        ai_health = await ai_manager.health_check()
        ai_status = ai_health["manager_status"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_status = "healthy"
        if not db_status or ai_status != "healthy":
            overall_status = "degraded"

        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "status": overall_status,
                "message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
                "components": {
                    "config": "healthy",
                    "database": db_status_str,
                    "ai_providers": ai_status,
                },
                "details": {
                    "ai_providers": ai_health["providers"],
                },
            },
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            content={
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ healthcheck: {e}",
                "components": {
                    "config": "unknown",
                    "database": "unknown",
                    "ai_providers": "unknown",
                },
            },
        )


@app.post("/webhook")
async def telegram_webhook(request: Request) -> Response:  # noqa: ARG001
    """
    Telegram webhook endpoint.

    Args:
        request: HTTP –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram

    Returns:
        Response: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    """
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ aiogram
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return Response(status_code=status.HTTP_200_OK)


@app.get("/")
async def root() -> JSONResponse:
    """
    Root endpoint.

    Returns:
        JSONResponse: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    return JSONResponse(
        status_code=status.HTTP_200_OK,
        content={"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ö–æ–º–ø–∞–Ω—å–æ–Ω API", "version": "1.0.0"},
    )


if __name__ == "__main__":
    import uvicorn

    config = get_config()

    uvicorn.run(
        "app.web:app",
        host="0.0.0.0",  # noqa: S104
        port=8000,
        reload=config.debug,
        log_level=config.log_level.lower(),
    )
