"""
@file: utils/logging.py
@description: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dependencies: loguru
@created: 2025-09-07
"""

import json
import sys
from datetime import UTC, datetime
from pathlib import Path
from typing import Any

from loguru import logger


def json_formatter(record: dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç.

    Args:
        record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –æ—Ç loguru

    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    """
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    log_entry = {
        "timestamp": record["time"].isoformat(),
        "level": record["level"].name,
        "logger": record["name"],
        "function": record["function"],
        "line": record["line"],
        "message": record["message"],
        "module": record["module"],
        "process": record["process"].id,
        "thread": record["thread"].id,
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if record.get("extra"):
        log_entry["extra"] = record["extra"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if record["exception"]:
        log_entry["exception"] = {
            "type": record["exception"].type.__name__,
            "value": str(record["exception"].value),
            "traceback": record["exception"].traceback,
        }

    return json.dumps(log_entry, ensure_ascii=False)


def console_formatter(record: dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏.

    Args:
        record: –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –æ—Ç loguru

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    """
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    level_emoji = {
        "TRACE": "üîç",
        "DEBUG": "üêõ",
        "INFO": "‚ÑπÔ∏è",
        "SUCCESS": "‚úÖ",
        "WARNING": "‚ö†Ô∏è",
        "ERROR": "‚ùå",
        "CRITICAL": "üí•",
    }

    emoji = level_emoji.get(record["level"].name, "üìù")

    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    colors = {
        "TRACE": "<dim>",
        "DEBUG": "<blue>",
        "INFO": "<cyan>",
        "SUCCESS": "<green>",
        "WARNING": "<yellow>",
        "ERROR": "<red>",
        "CRITICAL": "<red><bold>",
    }

    color = colors.get(record["level"].name, "")

    # –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    time_str = record["time"].strftime("%H:%M:%S")
    level_str = record["level"].name.ljust(8)
    module_str = f"{record['module']}:{record['line']}"

    return (
        f"{color}{emoji} {time_str} | "
        f"{level_str} | "
        f"{module_str:<20} | "
        f"{record['message']}"
        f"</>"
    )


def setup_logging(
    log_level: str = "INFO",
    enable_json: bool = False,
    log_file_path: Path | None = None,
    enable_console: bool = True,
    enable_request_logging: bool = False,
) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        enable_json: –í–∫–ª—é—á–∏—Ç—å JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤
        log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ None - –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)
        enable_console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        enable_request_logging: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π handler
    logger.remove()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    if enable_console:
        logger.add(
            sys.stdout,
            format=console_formatter,
            level=log_level,
            colorize=True,
            backtrace=True,
            diagnose=True,
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    if log_file_path:
        log_file_path.parent.mkdir(parents=True, exist_ok=True)

        if enable_json:
            # JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
            logger.add(
                log_file_path / "app.json",
                format=json_formatter,
                level=log_level,
                rotation="10 MB",
                retention="30 days",
                compression="gz",
                backtrace=True,
                diagnose=True,
            )

        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        logger.add(
            log_file_path / "app.log",
            format=(
                "{time:YYYY-MM-DD HH:mm:ss} | "
                "{level: <8} | "
                "{name}:{function}:{line} | "
                "{message}"
            ),
            level=log_level,
            rotation="10 MB",
            retention="30 days",
            compression="gz",
            backtrace=True,
            diagnose=True,
        )

        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        logger.add(
            log_file_path / "errors.log",
            format=(
                "{time:YYYY-MM-DD HH:mm:ss} | "
                "{level: <8} | "
                "{name}:{function}:{line} | "
                "{message}\n"
                "{exception}"
            ),
            level="ERROR",
            rotation="10 MB",
            retention="60 days",
            compression="gz",
            backtrace=True,
            diagnose=True,
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    if enable_request_logging:
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        logger.add(
            log_file_path / "requests.log" if log_file_path else sys.stdout,
            format=(
                "{time:YYYY-MM-DD HH:mm:ss} | "
                "REQUEST | "
                "{extra[method]} {extra[url]} | "
                "Status: {extra[status_code]} | "
                "Time: {extra[response_time]}ms"
            ),
            filter=lambda record: "request" in record.get("extra", {}),
            level="INFO",
        )

    logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.debug(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
    logger.debug(f"üìÅ JSON —Ñ–æ—Ä–º–∞—Ç: {'–≤–∫–ª—é—á–µ–Ω' if enable_json else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.debug(f"üìã –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {'–≤–∫–ª—é—á–µ–Ω' if enable_console else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.debug(
        f"üåê –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {'–≤–∫–ª—é—á–µ–Ω–æ' if enable_request_logging else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}"
    )


def get_logger(name: str) -> "logger":
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è.

    Args:
        name: –ò–º—è –º–æ–¥—É–ª—è/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    return logger.bind(component=name)


def log_function_call(func_name: str, **kwargs: Any) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    Args:
        func_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–¥—É—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–µ–∫—Ä–µ—Ç—ã)
    """
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    safe_kwargs = {}
    sensitive_keys = {"password", "token", "key", "secret", "api_key"}

    for key, value in kwargs.items():
        if any(sensitive in key.lower() for sensitive in sensitive_keys):
            safe_kwargs[key] = "***MASKED***"
        else:
            safe_kwargs[key] = value

    logger.debug(f"üîß –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}", extra={"parameters": safe_kwargs})


def log_performance(operation: str, duration_ms: float, **context: Any) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        operation: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        duration_ms: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        **context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    logger.info(
        f"‚è±Ô∏è {operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {duration_ms:.2f}ms",
        extra={
            "performance": {
                "operation": operation,
                "duration_ms": duration_ms,
                **context,
            },
        },
    )


def log_user_action(user_id: int, action: str, **details: Any) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        **details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    logger.info(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {action}",
        extra={
            "user_action": {
                "user_id": user_id,
                "action": action,
                "timestamp": datetime.now(tz=UTC).isoformat(),
                **details,
            },
        },
    )


def log_api_request(
    method: str,
    url: str,
    status_code: int,
    response_time: float,
) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        method: HTTP –º–µ—Ç–æ–¥
        url: URL –∑–∞–ø—Ä–æ—Å–∞
        status_code: –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞
        response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(
        f"üåê {method} {url} -> {status_code} ({response_time:.0f}ms)",
        extra={
            "request": True,
            "method": method,
            "url": url,
            "status_code": status_code,
            "response_time": response_time,
        },
    )


# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
__all__ = [
    "console_formatter",
    "get_logger",
    "json_formatter",
    "log_api_request",
    "log_function_call",
    "log_performance",
    "log_user_action",
    "setup_logging",
]
