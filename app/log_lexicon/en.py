# English lexicon for log messages
LOG_LEXICON_EN = {
    "main": {
        "bot_starting": "🚀 Starting AI-Companion bot...",
        "bot_started": "✅ Bot @{username} ({full_name}) started successfully",
        "bot_initialized": "🎉 Bot initialized successfully",
        "bot_registering_routers": "🔗 Registering {count} routers",
        "bot_setting_commands": "⌨️ Setting up bot commands",
        "bot_commands_set": "✅ Bot commands set",
        "bot_polling_started": "📡 Starting polling mode...",
        "bot_polling_stopped": "🛑 Polling stopped",
        "bot_polling_stop_timeout": "⏰ Polling stop timeout",
        "bot_session_closed": "🔒 Bot session closed",
        "bot_session_close_timeout": "⏰ Bot session close timeout",
        "bot_db_closed": "✅ Database connection closed",
        "bot_db_close_timeout": "⏰ Database connection close timeout",
        "bot_ai_manager_closed": "✅ AI manager closed",
        "bot_ai_manager_close_timeout": "⏰ AI manager close timeout",
        "bot_shutdown_completed": "✅ Graceful shutdown completed",
        "bot_shutdown_started": "🛑 Starting graceful shutdown...",
        "bot_shutdown_error": "💥 Error during shutdown: {error}",
        "bot_signal_received": "🔔 Received signal {signal} - starting shutdown",
        "bot_keyboard_interrupt": "🛑 Work interrupted by user (Ctrl+C)",
        "bot_user_interrupted": "🛑 User interrupted execution (Ctrl+C)",
        "bot_critical_error": "💥 Critical error: {error}",
        "bot_program_finished": "🏁 Program finished",
        "bot_db_initializing": "📚 Initializing database...",
        "bot_registered_routers": "✅ Registered {count} routers",
        "bot_webhook_started": "🌐 Starting in webhook mode: {url}",
        "bot_webhook_set": "✅ Webhook configured",
        "bot_polling_not_started": "Polling was not started, skipping stop_polling",
        "bot_error_stopping_polling": "Error stopping polling: {error}",
        "bot_error_in_polling": "💥 Error in polling: {error}",
        "bot_error_in_run_polling": "💥 Error in run_polling: {error}",
        "bot_shutdown_initiated": "🛑 Initiating graceful shutdown...",
    },
    "start": {
        "start_command_received": "📥 Received /start command from user {user_id}",
        "start_user_created": "🆕 Created new user ID:{user_id} (@{username})",
        "start_user_info_updated": "🔄 Updated user info for ID:{user_id}",
        "start_command_processed": "✅ /start command processed for user ID:{user_id}",
        "start_command_error": "💥 Error processing /start for user ID:{user_id}: {error}",
        "start_user_creation_error": "💥 Error creating user ID:{user_id}: {error}",
        "start_unexpected_error": "💥 Unexpected error for user ID:{user_id}: {error}",
        "start_error_sending_message": "💥 Error sending message: {error}",
    },
    "help": {
        "help_command_processed": "✅ /help command processed for user ID:{user_id}",
        "help_command_error": "💥 Error processing /help for user ID:{user_id}: {error}",
        "help_error_sending_message": "💥 Error sending help message: {error}",
    },
    "profile": {
        "profile_command_processed": "✅ /profile command processed for user ID:{user_id}",
        "profile_command_error": "💥 Error processing /profile for user ID:{user_id}: {error}",
        "profile_error_sending_message": "💥 Error sending profile message: {error}",
    },
    "limits": {
        "limits_command_processed": "✅ /limits command processed for user ID:{user_id}",
        "limits_command_error": "💥 Error processing /limits for user ID:{user_id}: {error}",
        "limits_error_sending_message": "💥 Error sending limits message: {error}",
    },
    "premium": {
        "premium_command_processed": "✅ /premium command processed for user ID:{user_id}",
        "premium_command_error": "💥 Error processing /premium for user ID:{user_id}: {error}",
        "premium_error_sending_message": "💥 Error sending premium message: {error}",
    },
    "message": {
        "message_received": "📥 Received message from @{username}: {chars} characters...",
        "message_processing": "🔄 Processing message from user ID:{user_id}",
        "message_user_limit_exceeded": "🚫 User ID:{user_id} exceeded message limit",
        "message_ai_generating": "🤖 Generating AI response...",
        "message_ai_response": "📤 Response from {provider}: {chars} characters, {tokens} tokens, {duration} sec",
        "message_ai_response_generated": "✅ AI response generated: {response}",
        "message_conversation_saved": "💾 Conversation saved for user ID:{user_id}",
        "message_conversation_save_error": "💥 Error saving conversation for user ID:{user_id}",
        "message_sent": "✈️ Sent to @{username}: {chars} characters, {tokens} tokens, {duration} sec",
        "message_processed": "🔄 Message processing completed for user ID:{user_id}: {chars} characters, {tokens} tokens, model {model}, {duration} sec",
        "message_error": "💥 Error processing message from user ID:{user_id}: {error}",
    },
    "callbacks": {
        "callback_received": "📥 Received callback from user ID:{user_id}",
        "callback_processed": "✅ Callback processed for user ID:{user_id}",
        "callback_error": "💥 Error processing callback for user ID:{user_id}: {error}",
        "callback_main_menu_error": "💥 Error showing main menu: {error}",
        "callback_main_menu_fallback_error": "💥 Fallback error showing main menu: {error}",
    },
    "database": {
        "db_initializing": "🗄️ Initializing database...",
        "db_initialized": "✅ Database initialized",
        "db_connection_check": "🔍 Checking DB connection...",
        "db_connection_healthy": "✅ DB connection is healthy",
        "db_connection_error": "❌ Database connection error: {error}",
        "db_creating_tables": "📋 Creating tables...",
        "db_tables_created": "✅ Tables created",
        "db_dropping_tables": "💣 Dropping tables (debug mode)...",
        "db_tables_dropped": "✅ Tables dropped",
        "db_close_connection": "🔒 Closing DB connection...",
        "db_connection_closed": "✅ DB connection closed",
        "db_check_existence": "🔍 Checking existence of database '{database_name}'...",
        "db_exists": "✅ Database '{database_name}' already exists",
        "db_creating": "🏗️ Creating database '{database_name}'...",
        "db_created": "✅ Database '{database_name}' created successfully",
        "db_create_error": "❌ Database creation error: {error}",
        "db_continue_with_existing": "⚠️ Continuing with existing database",
        "db_connecting": "🔗 Creating database connection...",
        "db_engine_created": "✅ Database engine created: {db_url}",
        "db_check_tables": "🔍 Checking for table existence...",
        "db_tables_exist": "✅ Tables already exist",
        "db_creating_tables_alt": "📋 Creating tables...",
        "db_tables_created_alt": "✅ Tables created successfully",
        "db_tables_check_error": "⚠️ Error checking tables: {error}",
        "db_initialized_alt": "🎉 Database initialized successfully",
        "db_init_error": "💥 Database initialization error: {error}",
        "db_closing": "🔌 Closing database connection...",
        "db_closed": "✅ Database connection closed",
        "db_connection_ok": "✅ DB connection is working",
        "db_new_session": "🆕 Creating new DB session",
        "db_session_ended": "🔚 DB session ended",
        "db_session_closed": "🔒 DB session closed",
        "db_sqlalchemy_error": "🐍 SQLAlchemy error: {error}",
        "db_unexpected_error": "💥 Unexpected database error: {error}",
    },
    "ai_providers": {
        "ai_provider_initialized": "🔧 Provider {provider} initialized",
        "ai_provider_configured": "⚙️ Provider {provider} configured",
        "ai_provider_available": "🟢 Provider {provider} available",
        "ai_provider_unavailable": "🔴 Provider {provider} unavailable",
        "ai_provider_error": "💥 Provider {provider} error: {error}",
        "ai_provider_auth_error": "🔐 Provider {provider} authentication error: {error}",
        "ai_provider_connection_error": "🔌 Provider {provider} connection error: {error}",
        "ai_provider_rate_limit": "⏳ Provider {provider} rate limit exceeded: {error}",
        "ai_provider_quota_exceeded": "💳 Provider {provider} quota exceeded: {error}",
        "ai_provider_timeout": "⏰ Provider {provider} timeout: {error}",
        "ai_provider_invalid_response": "📄 Invalid response format from provider {provider}: {error}",
        "ai_provider_empty_response": "📭 Empty response from provider {provider}",
        "ai_all_providers_failed": "💥 All AI providers unavailable",
    },
    "ai_manager": {
        "ai_manager_initializing": "🧠 Initializing AI manager...",
        "ai_manager_initialized": "✅ AI manager initialized",
        "ai_manager_registering_provider": "🔌 Registering provider {provider}",
        "ai_manager_provider_registered": "✅ Provider {provider} registered",
        "ai_manager_selecting_provider": "🔄 Selecting provider for request...",
        "ai_manager_provider_selected": "✅ Selected provider {provider}",
        "ai_manager_fallback_triggered": "🔁 Fallback triggered to provider {provider}",
        "ai_manager_response_cached": "Caching AI response...",
        "ai_manager_cache_hit": "✅ AI response cache hit",
        "ai_manager_cache_miss": "❌ AI response cache miss",
    },
    "config": {
        "config_loading": "⚙️ Loading configuration...",
        "config_loaded": "✅ Configuration loaded",
        "config_loading_error": "💥 Configuration loading error: {error}",
        "config_env_file_not_found": "📄 .env file not found, using environment variables",
        "config_validating": "🔍 Validating configuration...",
        "config_validated": "✅ Configuration validated",
        "config_loaded_success": "✅ Application configuration loaded successfully",
    },
    "errors": {
        "unexpected_error": "💥 Unexpected error: {error}",
        "user_not_found": "👤 User not found: {user_id}",
        "user_creation_failed": "💥 User creation failed: {error}",
        "db_integrity_error": "🔒 Database integrity error: {error}",
        "db_sqlalchemy_error": "🐍 SQLAlchemy error: {error}",
        "ai_auth_error": "🔐 AI authentication error: {error}",
        "ai_connection_error": "🔌 AI connection error: {error}",
        "ai_rate_limit_error": "⏳ AI rate limit error: {error}",
        "ai_quota_error": "💳 AI quota error: {error}",
        "ai_timeout_error": "⏰ AI timeout error: {error}",
        "ai_invalid_response_error": "📄 Invalid AI response error: {error}",
        "ai_empty_response_error": "📭 Empty AI response error",
        "ai_provider_error": "💥 AI provider {provider} error: {error}",
        "conversation_history_error": "📜 Conversation history error: {error}",
        "conversation_save_error": "💾 Conversation save error: {error}",
        "db_connection_error": "🗄️ Database connection error: {error}",
        "user_creation_error": "👤 User creation error: {error}",
        "user_not_found_error": "👤 Error: user not found",
        "user_update_error": "👤 User update error: {error}",
        "callback_main_menu_error": "💥 Error showing main menu: {error}",
        "callback_main_menu_fallback_error": "💥 Fallback error showing main menu: {error}",
    },
    "language": {
        "language_command_processed": "🌐 Received /language command from user ID:{user_id}",
        "language_command_error": "💥 Error processing /language for user ID:{user_id}: {error}",
        "language_changed_success": "✅ User ID:{user_id} language successfully changed to {language}",
        "language_selection_error": "💥 Error selecting language for user ID:{user_id}: {error}",
    },
    "middleware": {
        "auth_middleware_initialized": "🛡️ AuthMiddleware initialized",
        "rate_limit_middleware_initialized": "⏳ RateLimitMiddleware initialized with limit {limit} requests/minute",
        "logging_middleware_initialized": "📝 LoggingMiddleware initialized",
        "metrics_middleware_initialized": "📊 MetricsMiddleware initialized",
        "user_language_middleware_initialized": "🌍 UserLanguageMiddleware initialized",
        "conversation_middleware_initialized": "💾 ConversationMiddleware initialized",
        "user_counter_middleware_initialized": "🔢 UserCounterMiddleware initialized",
        "user_authenticated": "✅ User ID:{user_id} (@{username}) authenticated",
        "user_auth_failed": "❌ Failed to authenticate Telegram user ID:{telegram_id}",
        "user_auth_error": "💥 Error authenticating Telegram user ID:{telegram_id}: {error}",
        "user_language_set": "🌐 Set user ID:{user_id} language to {language}",
        "conversation_saved": "💾 Conversation saved for user ID:{user_id}",
        "conversation_save_error": "💥 Error saving conversation for user ID:{user_id}",
        "user_message_count_updated": "📈 Updated message count for user ID:{user_id}",
        "user_message_count_error": "💥 Error updating message count for user ID:{user_id}: {error}",
        "rate_limit_exceeded": "🚫 User ID:{user_id} exceeded request limit ({requests_count}/{limit})",
        "rate_limit_message_error": "💥 Error sending rate limit message: {error}",
        "rate_limit_callback_error": "💥 Error sending rate limit callback response: {error}",
        "message_received": "📥 Received message from user ID:{user_id} (@{username}): {text_preview}",
        "callback_received": "📥 Received callback from user ID:{user_id} (@{username}): {callback_data}",
        "other_event_received": "📥 Received other event from user ID:{user_id} (@{username})",
        "event_processed": "✅ Event {event_type} from user ID:{user_id} processed",
        "event_processing_error": "💥 Error processing event {event_type} from user ID:{user_id}: {error}",
        "metrics_collected": "📈 Collected metrics: total {total_requests}, messages {message_requests}, callbacks {callback_requests}",
    },
    "admin": {
        "unauthorized_access": "🔒 Unauthorized access by user ID:{user_id} to command {command}",
        "health_check_requested": "🏥 Admin ID:{admin_id} requested health check",
        "health_check_completed": "✅ Extended health check completed",
        "health_check_error": "💥 Error executing health check for admin ID:{admin_id}: {error}",
    },
}
